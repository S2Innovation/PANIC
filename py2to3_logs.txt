--- ./panic/test/alarm_test.py	(original)
+++ ./panic/test/alarm_test.py	(refactored)
@@ -79,7 +79,7 @@
     if t in api:
       alarms.append(t)
     if t in api.devices:
-      alarms.extend(api.devices[t].alarms.keys())
+      alarms.extend(list(api.devices[t].alarms.keys()))
 
   for a in alarms:
     devs.append(api[a].device)
@@ -106,15 +106,15 @@
     device = file2dev(filename)
 
   data = json.load(open(filename))
-  vals = dict((str(k),v['value']) for k,v in data['attributes'].items())
-  for k,v in vals.items():
-    if type(v)==unicode:
+  vals = dict((str(k),v['value']) for k,v in list(data['attributes'].items()))
+  for k,v in list(vals.items()):
+    if type(v)==str:
       vals[k] = str(v)
 
   diff = []
   dp = ft.get_device(device)
   attrs = dp.get_attribute_list()
-  for k,v in vals.items():
+  for k,v in list(vals.items()):
     if not fn.inCl(k,attrs):
       diff.append((device,k,v,None))
     else:
@@ -122,7 +122,7 @@
         w = dp.read_attribute(k).value
         if w!=v:
           diff.append((device,k,v,w))
-      except Exception,e:
+      except Exception as e:
         diff.append((device,k,v,e))
 
   if brief:
@@ -144,14 +144,14 @@
     
     if data['dev_class'] == 'PyAlarm':
       props = data['properties']
-      props = dict((str(k),map(str,v)) for k,v in props.items())
+      props = dict((str(k),list(map(str,v))) for k,v in list(props.items()))
 
       assert not ft.get_matching_devices(dd), Exception('Device %s Already Exists!!!'%dd)
       ft.add_new_device('PyAlarm/'+instance,'PyAlarm',dd)
       ft.put_device_property(dd,props)
       
     else:
-      vals = dict((str(k),v['value']) for k,v in data['attributes'].items())
+      vals = dict((str(k),v['value']) for k,v in list(data['attributes'].items()))
       dynattrs = []
       for k,v in sorted(vals.items()):
         if k.lower() in ('state','status'):
--- ./panic/test/test_view.py	(original)
+++ ./panic/test/test_view.py	(refactored)
@@ -12,11 +12,11 @@
 import fandango as fn
 
 while 1:
-  c = raw_input('command or exit?')
+  c = input('command or exit?')
   if c == 'exit': break
   try:
-    if c: print(fn.evalX(c,_locals=locals()))
-  except Exception,e: print(e)
+    if c: print((fn.evalX(c,_locals=locals())))
+  except Exception as e: print(e)
 
 
 
--- ./panic/test/test_panic.py	(original)
+++ ./panic/test/test_panic.py	(refactored)
@@ -16,7 +16,7 @@
 @InOutLogged
 def test_AlarmDS(device=''):
   if not device:
-    device = Fn.first((d for d,v in api.devices.items() if v.ping() is not None),None)
+    device = Fn.first((d for d,v in list(api.devices.items()) if v.ping() is not None),None)
   Fn.log.info('Testing AlarmDS(%s)'%device)
   if device:
     device = api.devices.get(device)
--- ./panic/view.py	(original)
+++ ./panic/view.py	(refactored)
@@ -70,8 +70,8 @@
             if isSequence(filters): #It doesn't matter which types
                 [self.add(str(i),f) for i,f in enumerate(filters)]
                 
-            elif isMapping(filters) and isMapping(filters.values()[0]):
-                    [self.add(k,v) for k,v in filters.items()]
+            elif isMapping(filters) and isMapping(list(filters.values())[0]):
+                    [self.add(k,v) for k,v in list(filters.items())]
             
             else:
                 self.add('default',filters)
@@ -87,11 +87,11 @@
         # Several keys at same level acts like OR
         # Keys at different levet act like AND
         # An !exclude clause always aborts
-        for k,v in self.items():
-            if verbose: print('match((%s,%s),%s)'%(k,v,value))
+        for k,v in list(self.items()):
+            if verbose: print(('match((%s,%s),%s)'%(k,v,value)))
             hits = 0
 
-            for p,r in v.items():
+            for p,r in list(v.items()):
                 #get the parameter
                 t = value.get(p,'') if is_map else getattr(value,p,'')
                 #get the result of the matching method (~! will negate)
@@ -106,7 +106,7 @@
                     hits,gm = hits+1,m
                 elif fd.re.match('^[!~]',str(r)):
                     #Negated matches exclude the whole element
-                    if verbose: print('%s excluded by %s'%(t,r))
+                    if verbose: print(('%s excluded by %s'%(t,r)))
                     return False
 
             if not hits: 
@@ -116,15 +116,15 @@
         return gm if hits else None
         
     def apply(self,sequence,strict=False,verbose=False):
-        r = filter(partial(self.match,strict=strict,verbose=verbose),sequence)
+        r = list(filter(partial(self.match,strict=strict,verbose=verbose),sequence))
         if verbose:
-            print('FilterStack.apply(%s,%s): \n\t%s'%(sequence,self.items(),r))        
+            print(('FilterStack.apply(%s,%s): \n\t%s'%(sequence,list(self.items()),r)))        
         return r
       
     def __repr__(self):
         dct = {}
-        for k,v in self.items():
-            for kk,vv in v.items():
+        for k,v in list(self.items()):
+            for kk,vv in list(v.items()):
                 if vv:
                     dct[k] = dct.get(k,{})
                     dct[k][kk] = vv
@@ -173,7 +173,7 @@
         self.defaults = Struct(dict((k,'') for k in 
               ('device','active','severity','regexp','receivers',
                'formula','attribute','history','failed','hierarchy')))
-        [self.defaults.update(**f) for f in self.filters.values()]
+        [self.defaults.update(**f) for f in list(self.filters.values())]
         self.filters.insert(0,'default',self.defaults.dict())
         
         self.info('AlarmView(%s)'%str((filters,scope,refresh,asynch)))
@@ -205,9 +205,9 @@
                     self.apis[p] = None
                 
         #@TODO: MULTIPLE APIS OBJECTS SHOULD BE MANAGED!!
-        self.api = self.apis.values()[0]
-        
-        if not self.api.keys():
+        self.api = list(self.apis.values())[0]
+        
+        if not list(self.api.keys()):
             self.warning('NO ALARMS FOUND IN DATABASE!?!?')
 
 
@@ -243,7 +243,7 @@
         self.logPrint('info','\n\n')
         
     def __del__(self):
-        print('AlarmView(%s).__del__()'%self.name)
+        print(('AlarmView(%s).__del__()'%self.name))
         self.disconnect()
         
     @staticmethod
@@ -258,10 +258,10 @@
         if opts:
             opts = dict(o.split('=') if '=' in o else (o,True) 
                         for o in opts)
-            opts.update((o,fd.str2type(v)) for o,v in opts.items())
-        
-        print('AlarmView(Test,\t'
-            '\tscope=%s,\n\ttlimit=%s,\n\t**%s)\n'%(scope,tlimit,opts))
+            opts.update((o,fd.str2type(v)) for o,v in list(opts.items()))
+        
+        print(('AlarmView(Test,\t'
+            '\tscope=%s,\n\ttlimit=%s,\n\t**%s)\n'%(scope,tlimit,opts)))
         
         if opts.get('d',False):
             th = TangoAttribute.get_thread()
@@ -273,17 +273,17 @@
         view = AlarmView('Test',scope=scope,
                          verbose=verbose,
                          **opts)
-        print('\n'.join('>'*80 for i in range(4)))    
+        print(('\n'.join('>'*80 for i in range(4))))    
         
         cols = 'sortkey','tag','state','active','time','severity'
         while fd.now()<(t0+tlimit):
             fd.wait(3.)
-            print('\n'+'<'*80)
+            print(('\n'+'<'*80))
             l = view.sort(as_text={'cols':cols})
-            print('\n'.join(l))
-            
-        print('AlarmView.__test__(%s) finished after %d seconds'
-              %(args[0],fd.now()-t0))
+            print(('\n'.join(l)))
+            
+        print(('AlarmView.__test__(%s) finished after %d seconds'
+              %(args[0],fd.now()-t0)))
         
     def get_alarm(self,alarm):
         #self.info('get_alarm(%s)'%alarm)
@@ -310,7 +310,7 @@
         Alarms should be returned matching the current sortkey.
         """
         if not self.filtered and not filters:
-            r = self.api.keys()[:]
+            r = list(self.api.keys())[:]
         else:
             if filters:
                 self.apply_filters(self,**filters)        
@@ -347,7 +347,7 @@
                 
             self.debug('apply_filters(%s)'%repr(filters))
             self.filtered = [a.tag for a in 
-                             filters.apply(self.api.values(),verbose=0)]
+                             filters.apply(list(self.api.values()),verbose=0)]
             self.filters = filters
             
             objs = [self.api[f] for f in self.filtered]
@@ -407,9 +407,9 @@
         * failed
         """
         try:
-            updated = [a for a in self.alarms.values() if a.updated]
+            updated = [a for a in list(self.alarms.values()) if a.updated]
             if len(updated) == len(self.alarms):
-                [a.get_active() for a in self.alarms.values() 
+                [a.get_active() for a in list(self.alarms.values()) 
                     if a.active in (1,True)]
             else:
                 self.info('sort(): %d alarms not updated yet'%(
@@ -429,7 +429,7 @@
                 if filtered:
                     objs = [self.api[f] for f in self.filtered]
                 else:
-                    objs = self.alarms.values()
+                    objs = list(self.alarms.values())
 
                 ordered = sorted(objs,key=sortkey)
                 if keep: self.ordered = ordered
@@ -477,7 +477,7 @@
                 s += formatters[r](*args)
             return s
         except:
-            print traceback.format_exc()
+            print(traceback.format_exc())
             return s
           
     def get_alarm_from_text(self,text,cols=None,
@@ -513,7 +513,7 @@
             try:
                 alarm = self.get_source(alarm).full_name
                 value = self.values.get(alarm,None)
-            except Exception,e:
+            except Exception as e:
                 self.warning('get_model(%s): %s'%(alarm,e))
         return value
       
@@ -525,13 +525,13 @@
             if ':' not in alarm:
                 alarm = ft.get_tango_host()+'/'+alarm
 
-        except Exception,e:
+        except Exception as e:
             self.warning('get_model(%s): %s'%(alarm,e))
 
         return str(alarm).lower()
       
     def get_sources(self):
-        return dict((s,v) for s,v in AlarmView.sources.items()
+        return dict((s,v) for s,v in list(AlarmView.sources.items())
                 if any(l() is self for l in v.listeners))
       
     def update_sources(self):
@@ -579,7 +579,7 @@
             return ta
             
     def disconnect(self,alarm=None):
-        sources = self.sources.values() if alarm is None else [self.get_source(alarm)]
+        sources = list(self.sources.values()) if alarm is None else [self.get_source(alarm)]
         for s in sources:
             s.removeListener(self)
             if not s.hasListeners():
@@ -620,7 +620,7 @@
                 dev = parse_tango_model(src.device)['devicename']
                 dev = self.api.get_device(dev)
                 assert dev,'UnknownDevice: %s'%src.device
-                alarms = dev.alarms.keys()
+                alarms = list(dev.alarms.keys())
                 
             check =  check_device_cached(src.device)
             if check in (None,'FAULT','UNKNOWN'):
@@ -704,7 +704,7 @@
                       '(%.2e in set_state, %.2e per alarm)\n'
                        %(tt,ts,ta))
                     
-        except Exception,e:
+        except Exception as e:
             self.error('AlarmView(%s).event_hook(%s,%s,%s)'%(
               self.name,src,type_, shortstr(value)))
             self.error(traceback.format_exc())
--- ./panic/test.py	(original)
+++ ./panic/test.py	(refactored)
@@ -15,9 +15,9 @@
     <pre><code class="python">"""
     
 def test_step(n,msg):
-    print '-'*80
-    print ' '+'Test %s: %s'%(n,msg)
-    print '-'*80
+    print('-'*80)
+    print(' '+'Test %s: %s'%(n,msg))
+    print('-'*80)
     
 def check_step(n):
     if start_step<=n:
@@ -42,12 +42,12 @@
     af = names[a]
     v = fn.tango.read_attribute(af)
     if 1 or olds[a] and olds[a][0][1]!=v:
-      print(a,af,olds[a][0][1],v)
+      print((a,af,olds[a][0][1],v))
   return
 
     
 def main_test():
-  print msg
+  print(msg)
 
   try:
       
@@ -69,14 +69,14 @@
       if check_step(0):
           tango.add_new_device('PySignalSimulator/test-alarms','PySignalSimulator','test/test/alarms-test')
           tango.put_device_property('test/test/alarms-test',{
-              'DynamicAttributes':map(str.strip,
+              'DynamicAttributes':list(map(str.strip,
               """#ALARM TESTING
               A=READ and VAR('VALUE1') or WRITE and VAR('VALUE1',VALUE)
               B=DevDouble(READ and VAR('B') or WRITE and VAR('B',VALUE))
               S=DevDouble(READ and VAR('B')*sin(t%3.14) or WRITE and VAR('B',VALUE))
               D=DevLong(READ and PROPERTY('DATA',True) or WRITE and WPROPERTY('DATA',VALUE))
               C = DevLong(READ and VAR('C') or WRITE and VAR('C',VALUE))
-              T=t""".split('\n')),
+              T=t""".split('\n'))),
               'DynamicStates':
               'STATE=C #INT to STATE conversion'
               })
@@ -178,7 +178,7 @@
       msg=ge
 
   except:
-      print traceback.format_exc()
+      print(traceback.format_exc())
 
   N,msg = -1,"""Stopping all servers ..."""
   check_step(N)
--- ./panic/ds/kpi.py	(original)
+++ ./panic/ds/kpi.py	(refactored)
@@ -34,9 +34,9 @@
     alldevs = fd.tango.get_all_devices(exported=True)
     
     result = fd.dicts.defaultdict(dict)
-    result['//alarms//'] = api.alarms.keys()
-    result['//devices//'] = api.devices.keys()
-    result['//servers//'] = api.servers.keys()
+    result['//alarms//'] = list(api.alarms.keys())
+    result['//devices//'] = list(api.devices.keys())
+    result['//servers//'] = list(api.servers.keys())
     
     off = []
     hung = []
@@ -44,7 +44,7 @@
     aslow = []
     errors = {}
     
-    for s,ss in api.servers.items():
+    for s,ss in list(api.servers.items()):
 
         admin = fd.parse_tango_model(ss.get_admin_name())['device']
         if admin.lower() not in alldevs:
@@ -84,7 +84,7 @@
                 evals = {}
                 result[d]['eval'],result[d]['ratio'] = -1,-1
             
-            for a,aa in api.devices[d].alarms.items():
+            for a,aa in list(api.devices[d].alarms.items()):
                 attrs = api.parse_attributes(aa['formula'])
                 result[d]['attrs'] += len(attrs)
                 result[a]['device'] = d
@@ -122,7 +122,7 @@
 def get_device_alarms(device,timeout=10000.):
     api = panic.api()
     return sorted((k,a['formula']) for k,a in 
-                  api.devices[device].alarms.items())
+                  list(api.devices[device].alarms.items()))
 
 def get_device_timeout(device,timeout,tries=1,exported=[],
           proxy=None,attr='ActiveAlarms',trace=True):
@@ -133,7 +133,7 @@
 
     if device not in exported:
         if trace:
-            print('%s is not exported!'%d)
+            print(('%s is not exported!'%d))
         return -1
 
     else:
@@ -148,9 +148,9 @@
                         time.sleep(1e-5)
                 t1 = now()-t0
 
-            except Exception,e:
+            except Exception as e:
                 if trace:
-                    print('%s failed!: %s'%(device,fd.excepts.exc2str(e)))
+                    print(('%s failed!: %s'%(device,fd.excepts.exc2str(e))))
                 #traceback.print_exc()
                 t = END_OF_TIME
                 break
@@ -164,20 +164,20 @@
     api = api or panic.api()
     devs = [d.lower() for d in api.devices if clmatch(devfilter,d)]
 
-    print('testing %d devices on %s'%(len(devs),api.tango_host))
+    print(('testing %d devices on %s'%(len(devs),api.tango_host)))
     times,failed, down = {},[],[]
     for d in devs:
         t = get_device_timeout(d,timeout,tries=3)
-        print(d,t)
+        print((d,t))
         times[d] = t
         if t<0: down.append(d)
         if t==END_OF_TIME: failed.append(d)
 
     print('')
-    print('%d devices were not exported: %s'%(len(down),','.join(down)))
-    print('%d devices failed: %s'%(len(failed),','.join(failed)))
-    
-    return sorted([v,k,len(api.devices[k].alarms)] for k,v in times.items())
+    print(('%d devices were not exported: %s'%(len(down),','.join(down))))
+    print(('%d devices failed: %s'%(len(failed),','.join(failed))))
+    
+    return sorted([v,k,len(api.devices[k].alarms)] for k,v in list(times.items()))
   
 def get_bad_devices(api=None,devfilter='*',timeout=3000.):
     times = get_all_timeouts(api,devfilter,timeout)
@@ -216,7 +216,7 @@
 def get_alarms_variables(api=None,alarmfilter='*'):
     api = api or panic.api()
     attrs = {}
-    for d,v in api.devices.items():
+    for d,v in list(api.devices.items()):
         for a,vv in v.alarms:
             if clmatch(alarmfilter,a):
                 try:
@@ -224,7 +224,7 @@
                 except:
                     attrs[a] = -1
         ss = sum([attrs[a] for a in v.alarms if attrs[a]>0])
-        print('%s : %s attributes in %s alarms'%(d,ss,len(v.alarms)))
+        print(('%s : %s attributes in %s alarms'%(d,ss,len(v.alarms))))
     return attrs
                     
   
@@ -232,20 +232,20 @@
     api = api or panic.api()
     devs = get_panic_devices(api,devfilter,exported=True)
     times = {}
-    print('%d devices'%len(devs))
+    print(('%d devices'%len(devs)))
     for d in devs:
         try:
             times[d] = get_device_eval_times(d,timeout,True)
         except:
             times[d] = END_OF_TIME
     return sorted([v,k] 
-                   for k,v in times.items())
+                   for k,v in list(times.items()))
   
 def get_devices_eval_ratio(api=None,devfilter='*',timeout=10000.):
     api = api or panic.api()
     devs = get_panic_devices(api,devfilter,exported=True)
     times = {}
-    print('%d devices'%len(devs))
+    print(('%d devices'%len(devs)))
     for d in devs:
         try:
             times[d] = get_device_eval_times(d,timeout,True)
@@ -253,7 +253,7 @@
             times[d] = END_OF_TIME
     return sorted([v/float(api.devices[k].config['PollingPeriod']),v,
                    k,len(api.devices[k].alarms)] 
-                   for k,v in times.items())
+                   for k,v in list(times.items()))
   
 def get_alarms_eval_times(api=None,alarmfilter='*',timeout=10000.):
     api = api or panic.api()
@@ -265,10 +265,10 @@
         except:
             et = dict((a,END_OF_TIME) for a in api.devices[d].alarms)
             
-        for a,t in et.items():
+        for a,t in list(et.items()):
             times[d+'/'+a] = t
             
-    return sorted([v,k] for k,v in times.items())
+    return sorted([v,k] for k,v in list(times.items()))
   
   
 def main(args=[]):
@@ -278,7 +278,7 @@
         quiet = "-v" not in opts
         m = globals().get(args[0].strip(';'),None)
         if m and isCallable(m):
-            args = map(str2type,args[1:])
+            args = list(map(str2type,args[1:]))
             try:
                 r = m(*args)
             except:
@@ -288,17 +288,17 @@
                 if isSequence(r):
                     print('')
                     for i,t in enumerate(r):
-                      print('%s: %s'%(i,obj2str(t)))
+                      print(('%s: %s'%(i,obj2str(t))))
                     print('')
                 else:
-                    print(obj2str(r))
+                    print((obj2str(r)))
             else:
-                print ''
+                print('')
 
     else:
-        print('\n'.join(sorted(l for l,v in globals().items()
+        print(('\n'.join(sorted(l for l,v in list(globals().items())
                                if l not in fd.functional.__dict__
                                and l!='main'
-                               and isCallable(v))))
+                               and isCallable(v)))))
         
 if __name__ == '__main__': main(sys.argv[1:])
--- ./panic/ds/PanicViewDS.py	(original)
+++ ./panic/ds/PanicViewDS.py	(refactored)
@@ -92,7 +92,7 @@
             name=self.get_name(),scope=self.Scope,filters=self.Filters,
             refresh=self.Refresh,events=self.UseEvents,verbose=2,
             )
-        print('>'*80)
+        print(('>'*80))
         #----- PROTECTED REGION END -----#	//	PanicViewDS.init_device
 
     def always_executed_hook(self):
@@ -358,9 +358,9 @@
         U.server_run()
 
     except PyTango.DevFailed as e:
-        print ('-------> Received a DevFailed exception:', e)
+        print(('-------> Received a DevFailed exception:', e))
     except Exception as e:
-        print ('-------> An unforeseen exception occured....', e)
+        print(('-------> An unforeseen exception occured....', e))
 
 if __name__ == '__main__':
     main()
--- ./panic/ds/__init__.py	(original)
+++ ./panic/ds/__init__.py	(refactored)
@@ -1,2 +1,2 @@
 
-import PyAlarm
+from . import PyAlarm
--- ./panic/ds/PyAlarm.py	(original)
+++ ./panic/ds/PyAlarm.py	(refactored)
@@ -60,8 +60,8 @@
 
 try: 
   __RELEASE__ = panic.__RELEASE__
-except Exception,e: __RELEASE__ = '6.?'
-print '> PyAlarm %s'%__RELEASE__
+except Exception as e: __RELEASE__ = '6.?'
+print('> PyAlarm %s'%__RELEASE__)
 
 try:
     try: import panic.extra.smslib as smslib
@@ -70,16 +70,16 @@
       except:
         import smslib
     SMS_ALLOWED=True
-    print('Using smslib from %s'%smslib.__file__)
-except Exception,e: 
-    print('UNABLE TO LOAD SMSLIB ... SMS MESSAGING DISABLED: %s'%e)
+    print(('Using smslib from %s'%smslib.__file__))
+except Exception as e: 
+    print(('UNABLE TO LOAD SMSLIB ... SMS MESSAGING DISABLED: %s'%e))
     SMS_ALLOWED=False
 
 try:
     from PyTangoArchiving import snap
     SNAP_ALLOWED=True
-except Exception,e:
-    print('UNABLE TO LOAD SNAP ... SNAP ARCHIVING DISABLED: %s'%e)
+except Exception as e:
+    print(('UNABLE TO LOAD SNAP ... SNAP ARCHIVING DISABLED: %s'%e))
     SNAP_ALLOWED=False
 #The device is not ready yet for Snapshoting
 #SNAP_ALLOWED=False
@@ -246,16 +246,16 @@
         """
         if _locals is None: _locals = {}
         try:
-            _locals.update(dict(zip('DOMAIN FAMILY MEMBER'.split(),
-                                    self.get_name().split('/'))))
+            _locals.update(dict(list(zip('DOMAIN FAMILY MEMBER'.split(),
+                                    self.get_name().split('/')))))
             _locals.update({'DEVICE':self.get_name(),
-                            'ALARMS':self.Alarms.keys(),
+                            'ALARMS':list(self.Alarms.keys()),
                             'PANIC':self.Panic,
                             'SELF':self})
             _locals['t'] = time.time() - (self.TStarted + self.StartupDelay)
             if not check: update = True #If check is True locals will be updated only if necessary or forced
             if check:
-                for k,v in self.Alarms.items():
+                for k,v in list(self.Alarms.items()):
                     val = v.active if not self.CheckDisabled(k) else False
                     if _locals.get(k,None)!=val: update = True
                     _locals[k] = val
@@ -265,15 +265,15 @@
                     try:
                         self.worker.send('update_locals',
                             target='update_locals',
-                            args={'dct':dict((k,v) for k,v in _locals.items() if k in self.Panic)},
+                            args={'dct':dict((k,v) for k,v in list(_locals.items()) if k in self.Panic)},
                             callback=None)
                     except: 
                         self.error('worker.send(update_locals) failed!: %s'%traceback.format_exc())
                         self.info(str(_locals))
                 else: 
                     self.Eval.update_locals(_locals)
-                    if check and self.Alarms.keys():
-                        if self.get_name()+'/'+self.Alarms.keys()[0] not in self.Eval.attributes:
+                    if check and list(self.Alarms.keys()):
+                        if self.get_name()+'/'+list(self.Alarms.keys())[0] not in self.Eval.attributes:
                           self.Eval.attributes.update(dict((str(n).lower(),fandango.tango.CachedAttributeProxy(n,fake=True))
                             for n in (self.get_name()+'/'+k for k in self.Alarms) ))
                         [self.Eval.attributes[self.get_name()+'/'+k].set_cache(_locals[k]) for k in self.Alarms]
@@ -286,8 +286,8 @@
         ## Dynamic Attributes Creator
         self.debug( '#'*40)
         self.info( 'In PyAlarm(%s).dyn_attr()'%self.get_name())
-        alarms = self.Alarms.keys()# if hasattr(self,'Alarms') else [a.tag for a in self.panic.get(device=self.get_name())]
-        self.update_locals(dict.fromkeys(self.Panic.keys()),check=False,update=True) # Done here to avoid subprocess triggering exceptions
+        alarms = list(self.Alarms.keys())# if hasattr(self,'Alarms') else [a.tag for a in self.panic.get(device=self.get_name())]
+        self.update_locals(dict.fromkeys(list(self.Panic.keys())),check=False,update=True) # Done here to avoid subprocess triggering exceptions
         
         for alarm in alarms:
             try:
@@ -351,12 +351,12 @@
           keys['$DESCRIPTION'] = keys['$VALUES'] = keys['$REPORT'] = ''
             
         def rep(s):
-          for k,v in keys.items():
+          for k,v in list(keys.items()):
             if v:
               s = s.replace(k,v)
           return s
 
-        argin = map(rep,argin) if isSequence(argin) else rep(argin)
+        argin = list(map(rep,argin)) if isSequence(argin) else rep(argin)
         #for k,v in keys.items():
           #argin = [clsub('\'+k,v,c,lower=0) for c in argin]
         
@@ -466,7 +466,7 @@
                 r = self.EvaluateFormula(self.Enabled,as_string=False,_locals={'t':t})
             except:
                 self.FailedAlarms['Enabled'] = traceback.format_exc()
-                print(self.FailedAlarms['Enabled'])
+                print((self.FailedAlarms['Enabled']))
                 r = False
                 
         self.PastValues['Enabled'] = t,r
@@ -482,9 +482,9 @@
                 #self.debug('previous values: %s'%previous.keys())
                 if variables is None: variables = self.Eval.parse_variables(self.Alarms[alarm].formula)
                 formula = self.Alarms[alarm].formula if alarm in self.Alarms else ''
-                VALUE = dict((k,v) for k,v in previous.items() if any(searchCl(self.Eval.parse_tag(v[0]+'/'+v[1],'.'),k) for v in variables))
-                VALUE.update((a,bool(v.active)) for a,v in self.Alarms.items() if a in formula)
-            except Exception,e: 
+                VALUE = dict((k,v) for k,v in list(previous.items()) if any(searchCl(self.Eval.parse_tag(v[0]+'/'+v[1],'.'),k) for v in variables))
+                VALUE.update((a,bool(v.active)) for a,v in list(self.Alarms.items()) if a in formula)
+            except Exception as e: 
                 self.warning('Exception parsing values: %s'%traceback.format_exc()) #except2str(e))
                 VALUE = {'Exception':str(previous)}
             return VALUE
@@ -531,7 +531,7 @@
                     self.lock.acquire()
                     timewait = float(self.PollingPeriod)/(len(self.Alarms) or 1.)
                     self.debug( 'updateAlarms(): timewait between polling is %f s'%timewait)
-                    myAlarms = sorted(a for a in self.Alarms.items() if not self.CheckDisabled(a[0])) #copied without disabled alarms
+                    myAlarms = sorted(a for a in list(self.Alarms.items()) if not self.CheckDisabled(a[0])) #copied without disabled alarms
                 finally: 
                     self.lock.release()
                 self.debug('\n'+
@@ -548,7 +548,7 @@
                         import taurus
                         tpolling = max((250,1e3*self.PollingPeriod/2.))
                         self.info('\tSet taurus polling period = %d ms'%tpolling)
-                        for a in taurus.Factory().tango_attrs.keys():
+                        for a in list(taurus.Factory().tango_attrs.keys()):
                             if a not in polled_attrs:
                                 polled_attrs.append(a)
                                 TA = taurus.Attribute(a)
@@ -557,7 +557,7 @@
                                 except:
                                     self.warning('\tThis Taurus release doesnt allow to force polling!')
                                     TA.changePollingPeriod(tpolling)
-                    except Exception,e: 
+                    except Exception as e: 
                         self.debug('\tunable to set taurus polling period: %s'%e)
                         #self.warning(traceback.format_exc())
                 elif self.worker:
@@ -577,7 +577,7 @@
                 else: self.info('\n'+'-'*80)
                 self.Uncatched=''
             
-            except Exception,e:
+            except Exception as e:
                 self.set_state(PyTango.DevState.FAULT)
                 from traceback import format_exc
                 tr=format_exc()
@@ -736,7 +736,7 @@
         return result
 
     def get_active_alarms(self):
-        return [k for k,v in self.Alarms.items() if v.active]
+        return [k for k,v in list(self.Alarms.items()) if v.active]
 
     #@self_locked
     def free_alarm(self,tag_name,comment='',message=None, notify=True):
@@ -964,7 +964,7 @@
                 
           return report
               
-        except Exception,e:
+        except Exception as e:
             self.warning('PyAlarm.send_alarm crashed with exception:\n%s' 
               % traceback.format_exc())
         self.info('-'*80)
@@ -982,7 +982,7 @@
             self.info( 'update_flag_file(%s,%s)' 
               % ('1' if AlarmsToNotify else '0' ,self.FlagFile))
 
-        except Exception,e:
+        except Exception as e:
             self.warning( 'Exception in PyAlarm.update_flag_file: %s' % str(e))
             return False
           
@@ -1020,7 +1020,7 @@
                     report.append( '\n\n' + 'Past Alarms were:' 
                       + '\n\t'.join([''] 
                       + ['%s:%s'%(','.join(k),time.ctime(d)) 
-                              for d,k in self.PastAlarms.items()]) +'\n')
+                              for d,k in list(self.PastAlarms.items())]) +'\n')
 
             if isSequence(report):
                 report = '\n'.join(report)
@@ -1038,7 +1038,7 @@
                 f.write(report)
                 f.close()
                 
-        except Exception,e:
+        except Exception as e:
             self.warning( 'Exception in PyAlarm.update_log_file: %s' 
                           % traceback.format_exc())
         finally:
@@ -1164,7 +1164,7 @@
             else: 
                 ctx.take_snapshot(comment=shortstr('ALARM: %s'%self.Alarms[tag_name].description,255))
                 
-        except Exception,e:
+        except Exception as e:
             self.warning( 'Exception in trigger snapshot: %s' % traceback.format_exc())
         return
     ##@}
@@ -1217,7 +1217,7 @@
 #------------------------------------------------------------------
     def __init__(self,cl, name):
         #This code should be executed only at server_init() and not at device.init()
-        print('In PyAlarm.__init__(%s,%s)'%(cl,name))
+        print(('In PyAlarm.__init__(%s,%s)'%(cl,name)))
         PyTango.Device_4Impl.__init__(self,cl,name)
         self.call__init__(fandango.log.Logger,name,format='%(levelname)-8s %(asctime)s %(name)s: %(message)s')
         self.setLogLevel('DEBUG')
@@ -1332,9 +1332,9 @@
                         self.Alarms.load(self.get_name())
                         self.Alarms.get_global_receivers(renew=True)
                         alarm_attrs = dict((a,v.get_attribute()) 
-                                           for a,v in self.Alarms.items())
+                                           for a,v in list(self.Alarms.items()))
                         for a in self.DynamicAttributes[:]:
-                            if a not in alarm_attrs.values():
+                            if a not in list(alarm_attrs.values()):
                                 try:
                                     self.info('Removing %s attribute'%a)
                                     self.remove_attribute(a)
@@ -1342,11 +1342,11 @@
                                     if self.worker: self.worker.pop(a)
                                 except:
                                     self.warning( traceback.format_exc())
-                        for a,v in alarm_attrs.items():
+                        for a,v in list(alarm_attrs.items()):
                             self.info('Alarm:'+(a))#.formula,v.receivers))
                             if v not in self.DynamicAttributes[:]:
                                 self.create_alarm_attribute(a)
-                except Exception,e:
+                except Exception as e:
                     raise e
                 finally: self.lock.release()                
                 
@@ -1415,7 +1415,7 @@
                               %max((500,1e3*self.PollingPeriod/2.)),
                               period=self.PollingPeriod)
                             
-                        except: print traceback.format_exc()
+                        except: print(traceback.format_exc())
                         
                     #raise Exception,'The StartupDelay should be asynchronous!
                     #It cannot be called before any "command" call
@@ -1427,7 +1427,7 @@
 
             self.AddressList = dict(self.PhoneBook)
 
-            for tag,alarm in self.Alarms.items():
+            for tag,alarm in list(self.Alarms.items()):
                 self.info('\n\t%s: %s\n\t\tFormula: %s\n\t\tSeverity: %s\n'
                   '\t\tReceivers: %s'%(tag,alarm.description,alarm.formula,
                                        alarm.severity,alarm.receivers))
@@ -1437,10 +1437,10 @@
 
             #Get SnapConfig
             if SNAP_ALLOWED and (self.UseSnap or any('SNAP' in str(a.receivers) 
-                      for a in self.Alarms.values())):
+                      for a in list(self.Alarms.values()))):
                 try:
                     self.snap = snap.SnapAPI()
-                except Exception,e: 
+                except Exception as e: 
                     self.warning('SnapConfig failed: %s'%e)
 
             if not self._initialized: 
@@ -1453,7 +1453,7 @@
             self.info('#'*80)
             self.setLogLevel(self.LogLevel)
 
-        except Exception,e:
+        except Exception as e:
             self.info( 'Exception in PyAlarm.init_device(): \n%s'
                       %traceback.format_exc())
             self.set_state(PyTango.DevState.FAULT)
@@ -1472,7 +1472,7 @@
         self.eval_status = ""
         try:
             actives = list(reversed([(v.active,k) 
-                        for k,v in self.Alarms.items() if v.active]))
+                        for k,v in list(self.Alarms.items()) if v.active]))
             tlimit = time.time()-2*self.PollingPeriod
             
             if [a for a in self.Alarms if a not in self.DisabledAlarms] \
@@ -1506,7 +1506,7 @@
                 if self.FailedAlarms:
                     status+='\n%d alarms couldnt be evaluated:\n%s'%(
                         len(self.FailedAlarms),
-                        ','.join(str(t) for t in self.FailedAlarms.items()))
+                        ','.join(str(t) for t in list(self.FailedAlarms.items())))
                     if float(len(self.FailedAlarms))/len(self.Alarms) > 0.1:
                       self.set_state(PyTango.DevState.FAULT)
                 if self.Uncatched:
@@ -1575,7 +1575,7 @@
         #    Add your own code here
         attr_AlarmConfig_read = []
         attr_AlarmConfig_read = ['%s:%s'%(prop,getattr(self,prop)) 
-                  for prop in PyAlarmClass.device_property_list.keys() 
+                  for prop in list(PyAlarmClass.device_property_list.keys()) 
                   if prop not in panic.ALARM_TABLES]
         attr.set_value(attr_AlarmConfig_read)
 
@@ -1588,7 +1588,7 @@
         #    Add your own code here
         attr_ActiveAlarms_read = ['%s:%s:%s' 
             % (tag_name,time.ctime(alarm.active),alarm.formula) 
-            for tag_name,alarm in self.Alarms.items() if alarm.active][-512:]
+            for tag_name,alarm in list(self.Alarms.items()) if alarm.active][-512:]
         attr.set_value(attr_ActiveAlarms_read, len(attr_ActiveAlarms_read))
 
 #------------------------------------------------------------------
@@ -1611,7 +1611,7 @@
         #    Add your own code here
         [self.CheckDisabled(t) for t in self.DisabledAlarms]
         attr_DisabledAlarms_read = sorted('%s:%s'%(a,time2str(t)) 
-                        for a,t in self.DisabledAlarms.items())[-512:]
+                        for a,t in list(self.DisabledAlarms.items()))[-512:]
         attr.set_value(attr_DisabledAlarms_read, len(attr_DisabledAlarms_read))
 
 #------------------------------------------------------------------
@@ -1621,7 +1621,7 @@
         #self.debug( "In "+self.get_name()+"::read_FailedAlarms()")
 
         #    Add your own code here
-        attr_FailedAlarms_read = self.FailedAlarms.keys()[-512:]
+        attr_FailedAlarms_read = list(self.FailedAlarms.keys())[-512:]
         attr.set_value(attr_FailedAlarms_read, len(attr_FailedAlarms_read))
 
 
@@ -1633,7 +1633,7 @@
 
         #    Add your own code here
         attr_PastAlarms_read = []
-        dates = self.PastAlarms.keys()
+        dates = list(self.PastAlarms.keys())
         dates.sort(reverse=True)
         for date in dates:
             for tag_name in self.PastAlarms[date]:
@@ -1651,7 +1651,7 @@
 
         #    Add your own code here
         attr_AlarmList_read = sorted('%s:%s'%(a.tag,a.formula) 
-                                     for a in self.Alarms.values())
+                                     for a in list(self.Alarms.values()))
         attr.set_value(attr_AlarmList_read, len(attr_AlarmList_read))
         
 #------------------------------------------------------------------
@@ -1671,7 +1671,7 @@
               (getattr(alarm,s) if s!='state' or self.get_enabled() 
                 else 'DSUPR'))
             for s in setup)
-          for alarm in self.Alarms.values())
+          for alarm in list(self.Alarms.values()))
         
         attr.set_value(attr_AlarmSummary_read, len(self.Alarms))
 
@@ -1683,7 +1683,7 @@
 
         #    Add your own code here
         attr_AlarmReceivers_read = sorted('%s:%s'%(k,v.receivers) 
-                        for k,v in self.Alarms.items())
+                        for k,v in list(self.Alarms.items()))
         attr.set_value(attr_AlarmReceivers_read, len(attr_AlarmReceivers_read))
 
 
@@ -1695,7 +1695,7 @@
 
         #    Add your own code here
         attr_PhoneBook_read = sorted('%s:%s'%(k,v) 
-                    for k,v in self.AddressList.items() if v)
+                    for k,v in list(self.AddressList.items()) if v)
         attr.set_value(attr_PhoneBook_read, len(attr_PhoneBook_read))
 
 
@@ -1707,7 +1707,7 @@
 
         #    Add your own code here
         attr_SentEmails_read = []
-        for key,value in self.SentEmails.items():
+        for key,value in list(self.SentEmails.items()):
             attr_SentEmails_read.append(key)
             attr_SentEmails_read.append(str(value))
         self.info( 'SentEmails are: %s'%attr_SentEmails_read)
@@ -1722,7 +1722,7 @@
 
         #    Add your own code here
         attr_SentSMS_read = []
-        for key,value in self.SentSMS.items():
+        for key,value in list(self.SentSMS.items()):
             attr_SentSMS_read.append(key)
             attr_SentSMS_read.append(str(value))
         self.debug( 'SentSMS are: %s'%attr_SentSMS_read)
@@ -1815,7 +1815,7 @@
             self.debug(shortstr('EvaluateFormula(%s): %s, Values = %s'
                                 %(tag_name or formula,svalue,variables),512))
 
-        except Exception,e:
+        except Exception as e:
             
             desc = except2str(e)
             if STATE: 
@@ -2027,7 +2027,7 @@
         try:
             self.lock.acquire()
             self.Alarms[argin[0]].add_receiver(argin[1])
-            argout = ['%s:%s'%(tag,','.join(alarm.receivers)) for tag,alarm in self.Alarms.items()]
+            argout = ['%s:%s'%(tag,','.join(alarm.receivers)) for tag,alarm in list(self.Alarms.items())]
         finally:
             self.lock.release()
         return argout
@@ -2182,7 +2182,7 @@
             if hasattr(values,'items'):
                 try: 
                     invkey = lambda t:(t[-1],t[0])
-                    for k,v in sorted(values.items(),key=invkey):
+                    for k,v in sorted(list(values.items()),key=invkey):
                         m = fandango.tango.parse_tango_model(k)
                         dev = m and m.get('devicename')
                         attr = m and m.get('attribute')
@@ -2208,7 +2208,7 @@
                     + '\n\t'.join([''] + sorted(
                     ['%s:%s:%s'%(k,time2str(v.active),
                                     self.Alarms[k].formula) 
-                        for k,v in self.Alarms.items() if v.active])))
+                        for k,v in list(self.Alarms.items()) if v.active])))
             except: pass
         
         if pasts and self.PastAlarms:
@@ -2281,7 +2281,7 @@
             report = self.send_alarm(alarm,message='ALARM',receivers=receivers)
             
             return 'DONE'
-        except Exception,e:
+        except Exception as e:
             msg = traceback.format_exc()
             self.info( 'Exception in PyAlarm.SendAlarm(): \n%s'%msg)
             return msg
@@ -2337,7 +2337,7 @@
                     self.SentEmails[m.lower()]+=1
                     
                 return 'DONE'
-        except Exception,e:
+        except Exception as e:
             self.info( 'Exception in PyAlarm.SendMail(): \n%s'
               %traceback.format_exc())
         return 'FAILED'
@@ -2363,7 +2363,7 @@
             f.write(report)
             f.close()
             return report
-        except Exception,e:
+        except Exception as e:
             self.warning( 'Exception in PyAlarm.SaveHtml(): \n%s'%traceback.format_exc())
         return 'FAILED'
 
@@ -2669,10 +2669,10 @@
         }
 
     def dyn_attr(self,dev_list):
-        print ( '>'*40)
-        print ("In PyAlarmClass.dyn_attr(%s)"%sorted(dev_list))
+        print(( '>'*40))
+        print(("In PyAlarmClass.dyn_attr(%s)"%sorted(dev_list)))
         for dev in sorted(dev_list):
-            print ("In PyAlarmClass.dyn_attr(%s)"%dev)
+            print(("In PyAlarmClass.dyn_attr(%s)"%dev))
             dev.dyn_attr()
 
 #------------------------------------------------------------------
@@ -2692,7 +2692,7 @@
                 PyAlarmClass.device_property_list[k][-1] = p
         
             s = name
-            print(s+'...')
+            print((s+'...'))
             PyTango.DeviceClass.__init__(self, name)
             self.set_type(name);
         except:
@@ -2718,17 +2718,17 @@
           import sys
           from fandango.device import DDebug          
           DDebug.addToServer(py,'PyAlarm',args[1])
-        except Exception,e:
-          print('Unable to add DDebug class to PyAlarm: ',e)
+        except Exception as e:
+          print(('Unable to add DDebug class to PyAlarm: ',e))
 
         U = PyTango.Util.instance()
         U.server_init()
         U.server_run()
 
-    except PyTango.DevFailed,e:
-        print '-------> Received a DevFailed exception:',traceback.format_exc()
-    except Exception,e:
-        print '-------> An unforeseen exception occured....',traceback.format_exc()
+    except PyTango.DevFailed as e:
+        print('-------> Received a DevFailed exception:',traceback.format_exc())
+    except Exception as e:
+        print('-------> An unforeseen exception occured....',traceback.format_exc())
   
 if __name__ == '__main__':
     main(sys.argv)
--- ./panic/properties.py	(original)
+++ ./panic/properties.py	(refactored)
@@ -357,12 +357,12 @@
          [] ] ,
     }
     
-PyAlarmDefaultProperties = dict(join(d.items() for d in 
+PyAlarmDefaultProperties = dict(join(list(d.items()) for d in 
                         (ALARM_CYCLE,ALARM_ARCHIVE,ALARM_LOGS,DEVICE_CONFIG)))
-DEVICE_PROPERTIES = dict(join(v.items() for v in 
+DEVICE_PROPERTIES = dict(join(list(v.items()) for v in 
                               (PyAlarmDefaultProperties,ALARM_TABLES)))
-ALARM_CONFIG = (ALARM_CYCLE.keys()+ALARM_ARCHIVE.keys()
-                                +ALARM_LOGS.keys()+DEVICE_CONFIG.keys())
+ALARM_CONFIG = (list(ALARM_CYCLE.keys())+list(ALARM_ARCHIVE.keys())
+                                +list(ALARM_LOGS.keys())+list(DEVICE_CONFIG.keys()))
 
 try:
     from fandango.doc import get_fn_autodoc
--- ./panic/__init__.py	(original)
+++ ./panic/__init__.py	(refactored)
@@ -8,7 +8,7 @@
 
 try: __RELEASE__ = open(os.path.dirname(os.path.abspath(__file__)
                                         )+'/VERSION').read().strip()
-except Exception,e: __RELEASE__ = '6.X+'
+except Exception as e: __RELEASE__ = '6.X+'
 
 #CLEAN DEPRECATED FILES
 #print('panic.__init__, deprecated files checking ...')
@@ -22,19 +22,19 @@
     if os.path.exists(p):
         try:
             os.remove(p)
-            print('%s removed ...'%p)
-        except Exception,e:
+            print(('%s removed ...'%p))
+        except Exception as e:
             print(e)
             print('panic, CLEAN OLD FILES ERROR!:')
-            print('An old file still exists at:\n\t%s'%p)
+            print(('An old file still exists at:\n\t%s'%p))
             print('Import panic as sysadmin and try again')
             print('')
             sys.exit(-1)
 
-import properties
-import alarmapi as _panic
-import alarmapi
-import view
+from . import properties
+from . import alarmapi as _panic
+from . import alarmapi
+from . import view
 
 from .view import AlarmView
 from .properties import *
--- ./panic/gui/utils.py	(original)
+++ ./panic/gui/utils.py	(refactored)
@@ -33,7 +33,7 @@
     return ' '.join(str(s).replace('\r',' ').replace('\n',' ').split())
 
 def print_clean(s):
-    print(clean_str(s))
+    print((clean_str(s)))
 
 try: TRACE_LEVEL = int(os.getenv('TRACE_LEVEL',-1))
 except: TRACE_LEVEL = (traceback.print_exc(),-1)[-1]
@@ -46,7 +46,7 @@
         if not dummies: 
             dummies.append(Logger())
             dummies[0].setLogLevel('INFO')
-        print dummies[0]
+        print(dummies[0])
         dummies[0].info(msg)
         dummies[0].error(msg)
     else:
@@ -66,8 +66,8 @@
         cb.setChecked(v)
         cb.blockSignals(False)
     except:
-        print 'Failed to setCheckBox(%s,%s)'%(cb,v)
-        print traceback.format_exc()
+        print('Failed to setCheckBox(%s,%s)'%(cb,v))
+        print(traceback.format_exc())
         
 def getWidgetText(widget,trace=True):
     """ helper to catch encoding exceptions in forms """
@@ -77,7 +77,7 @@
           msg = str(widget.toPlainText())
         else:
           msg = str(widget)
-    except Exception,e:
+    except Exception as e:
         if 'unicode' in str(e).lower():
             #v = QtGui.QMessageBox.warning(None,'Wrong characters', \
                 #'PANIC properties accept only ASCII characters, '
@@ -93,7 +93,7 @@
         else:
             #QtGui.QMessageBox.warning(None,'Wrong text',str(e))
             raise e
-    if trace: print('*'*80+'\n'+'%s => %s'%(widget,msg))
+    if trace: print(('*'*80+'\n'+'%s => %s'%(widget,msg)))
     return msg
     
 def getAlarmTimestamp(alarm,attr_value=None,use_taurus=True):
@@ -115,7 +115,7 @@
                 #(as it is used to set alarm.active)
     
 def getAlarmReport(alarm,parent=None):
-    print 'getAlarmReport(%s(%s))'%(type(alarm),alarm)
+    print('getAlarmReport(%s(%s))'%(type(alarm),alarm))
     try:
         if type(alarm) is panic.Alarm:
             alarm = alarm
@@ -138,7 +138,7 @@
     widget.setLayout(Qt.QVBoxLayout())
     msg = 'Last %s report:'%alarm.tag
     widget.setWindowTitle(msg)
-    print '%s\n%s'%(msg,details)
+    print('%s\n%s'%(msg,details))
     widget.layout().addWidget(Qt.QLabel(msg))
     tb = Qt.QTextBrowser(widget)
     tb.setPlainText(details)
@@ -208,15 +208,15 @@
     def init(self,tag=''):
       
         if not hasattr(self,'validator'):
-          print('>#'*40)
+          print(('>#'*40))
           self.UserValidator,self.validator = '',None
           log,p = '',str(sys.path)
           try:
               props = self.api.servers.db.get_class_property(
                   'PyAlarm',['UserValidator','PanicAdminUsers'])
               self.UserValidator = fandango.first(props['UserValidator'],'')
-              self.AdminUsers = filter(bool,
-                                       map(str.strip,props['PanicAdminUsers']))
+              self.AdminUsers = list(filter(bool,
+                                       list(map(str.strip,props['PanicAdminUsers']))))
               if self.UserValidator:
                 mod,klass = self.UserValidator.rsplit('.',1)
                 mod = fandango.objects.loadModule(mod)
@@ -228,19 +228,18 @@
                             'PyAlarm','PanicLogFile') or [''])[0]
                     if log: self.validator.setLogging(True,log)
                 except:
-                    print('Unable to write log %s'%log)
+                    print(('Unable to write log %s'%log))
                     traceback.print_exc()
           except:
               traceback.print_exc()
-              print('iValidateWidget: %s module not found in %s'
-                    %(self.UserValidator or 'PyAlarm.UserValidator',p))
+              print(('iValidateWidget: %s module not found in %s'
+                    %(self.UserValidator or 'PyAlarm.UserValidator',p)))
               return -1
 
         if self.AdminUsers and not self.UserValidator:
-            print(self.AdminUsers,self.UserValidator)
-            raise Exception,\
-                'iValidateWidget(PanicAdminUsers):'\
-                    ' UserValidator property not defined'
+            print((self.AdminUsers,self.UserValidator))
+            raise Exception('iValidateWidget(PanicAdminUsers):'\
+                    ' UserValidator property not defined')
             return -1
         if not self.AdminUsers and not self.UserValidator:
             #passwords not available
@@ -275,7 +274,7 @@
           if err == -1:
             msg = "%s module not found"%(
                 self.UserValidator or 'PyAlarm.UserValidator')
-            print('iValidateWidget: %s'%msg)
+            print(('iValidateWidget: %s'%msg))
             Qt.QMessageBox.critical(None,
                 "Error!",msg,
                 QtGui.QMessageBox.AcceptRole, QtGui.QMessageBox.AcceptRole)
@@ -330,15 +329,15 @@
         if w: (w.hide(),w.show())
     @classmethod
     def closeAll(klass):
-        print 'In WindowManager.closeAll(%s)'%klass
+        print('In WindowManager.closeAll(%s)'%klass)
         for w in klass.WINDOWS:
             try: w.close()
-            except Exception,e: '%s.close() failed: %s'%(w,e)
+            except Exception as e: '%s.close() failed: %s'%(w,e)
     def closeKlass(klass,target):
         for w in klass.WINDOWS:
             if isinstance(w,target):
                 try: w.close()
-                except Exception,e: '%s.close() failed: %s'%(w,e)
+                except Exception as e: '%s.close() failed: %s'%(w,e)
 
 class CleanMainWindow(Qt.QMainWindow,WindowManager):
     def closeEvent(self,event): 
@@ -361,7 +360,7 @@
           assert list(db.get_device_exported_for_class('SnapManager'))
           SNAP_ALLOWED = snap.SnapAPI()
           
-      except Exception,e:
+      except Exception as e:
           trace('PyTangoArchiving.Snaps not available: '\
               'HISTORY VIEWER DISABLED: '+traceback.format_exc(),'WARNING',-1)
           SNAP_ALLOWED = None
@@ -398,8 +397,8 @@
         if show: tt.show()
         tt.setWindowTitle('Trend')
     except:
-        print 'Exception in set_pressure_trend(%s)'%tt
-        print traceback.format_exc()
+        print('Exception in set_pressure_trend(%s)'%tt)
+        print(traceback.format_exc())
     return tt
         
 ###############################################################################
@@ -429,7 +428,7 @@
             
         self.device = device or getattr(self.obj,'device',None)
         self._locals = device and \
-            dict(zip('DOMAIN FAMILY MEMBER'.split(),self.device.split('/'))) \
+            dict(list(zip('DOMAIN FAMILY MEMBER'.split(),self.device.split('/')))) \
                 or {}
         
     @staticmethod
@@ -441,7 +440,7 @@
         return d
         
     def initStyle(self,show=False):
-        print 'In AlarmFormula.initStyle(%s)' %(self.obj or self.formula)
+        print('In AlarmFormula.initStyle(%s)' %(self.obj or self.formula))
         try:
             self.org_formula = self.formula
             self.setChildrenCollapsible(False)
@@ -500,13 +499,13 @@
             #Refresh from formula:
             if self.formula: self.updateFormula(self.formula)
             if show: self.show()
-            print 'AlarmFormula.initStyle(%s) finished.'%self.formula
+            print('AlarmFormula.initStyle(%s) finished.'%self.formula)
         except:
-            print traceback.format_exc()
-            print 'Unable to show AlarmFormula(%s)'%self.formula
+            print(traceback.format_exc())
+            print('Unable to show AlarmFormula(%s)'%self.formula)
             
     def onEdit(self,checked=True):
-        print 'In AlarmFormula.onEdit(%s)'%checked
+        print('In AlarmFormula.onEdit(%s)'%checked)
         self.tf.setReadOnly(not checked)
         self.tf.setEnabled(checked)
         #Order is not trivial, to avoid recursion
@@ -518,7 +517,7 @@
         else: self.emit(Qt.SIGNAL("onReadOnly()"))
         
     def onSave(self,ask=False):
-        print 'In AlarmFormula.onSave()'
+        print('In AlarmFormula.onSave()')
         if ask:
             v = QtGui.QMessageBox.warning(None,'Pending Changes', \
                 'Do you want to save %s changes?'%self.obj.tag, \
@@ -530,7 +529,7 @@
         self.emit(Qt.SIGNAL("onSave"),self.obj)
         
     def onClose(self):
-        print 'In AlarmFormula.onClose()'
+        print('In AlarmFormula.onClose()')
         if self.obj and self.toPlainText()!=self.org_formula:
             v = QtGui.QMessageBox.warning(None,'Pending Changes', \
                 '%s Formula has been modified, '\
@@ -541,7 +540,7 @@
         self.emit(Qt.SIGNAL("onClose()"))
         
     def undoEdit(self):
-        print 'In AlarmFormula.undoEdit()'
+        print('In AlarmFormula.undoEdit()')
         self.updateFormula(self.org_formula)
         if self.editcb.isChecked(): self.onEdit(False)
         
@@ -569,8 +568,8 @@
         self.formula = formula or multiline2line(text)
         self.tf.setPlainText(line2multiline(self.formula))
         if self.org_formula is None: self.org_formula = formula
-        print('In AlarmFormula.updateFormula(%s,changed=%s)'
-              %(self.formula,formula!=self.org_formula))
+        print(('In AlarmFormula.updateFormula(%s,changed=%s)'
+              %(self.formula,formula!=self.org_formula)))
         if self.formula: 
             self.test.formula = self.api.replace_alarms(self.formula)
         if parse: 
@@ -580,24 +579,24 @@
         return self.test.formula
             
     def updateResult(self,formula = ''):
-        print('In AlarmFormula.updateResult(%s(%s))'%(type(formula),formula))
+        print(('In AlarmFormula.updateResult(%s(%s))'%(type(formula),formula)))
         formula = self.updateFormula(formula,parse=not self.device)
         if self.org_formula and formula!=self.org_formula: 
             print('\tformula changed!')
-        print('\n'.join(map(str,zip('obj device formula test'.split(),
-                        (self.obj,self.device,formula,self.test.formula)))))
+        print(('\n'.join(map(str,list(zip('obj device formula test'.split(),
+                        (self.obj,self.device,formula,self.test.formula)))))))
         if formula:
             try:
                 result = '%s: %s'%(self.device,
                     self.api.evaluate(
                         formula if self.device else self.test.formula,
                         device=self.device,timeout=10000,_locals=self._locals))
-            except Exception,e: 
+            except Exception as e: 
                 result = '%s: %s: %s' % (self.device,type(e).__name__,e)
-                print result
+                print(result)
         else:
             result = traceback.format_exc()
-            print result
+            print(result)
         self.tb.setPlainText('%s'%result)
         self.tb.setParent(self,Qt.Qt.Dialog)
         self.tb.setWindowModality(Qt.Qt.WindowModal)
@@ -617,7 +616,7 @@
         self.updateAttributes(self.model)
         
     def initStyle(self):
-        print 'In AttributesPreview.initStyle()'
+        print('In AttributesPreview.initStyle()')
         try:
             self.setLayout(Qt.QGridLayout())
             self.redobt = Qt.QPushButton()
@@ -634,17 +633,17 @@
             self.connect(self.redobt,Qt.SIGNAL('pressed()'),
                          self.updateAttributes)
         except:
-            print traceback.format_exc()
+            print(traceback.format_exc())
             
     def updateAttributes(self,model=None):
-        print('AttributesPreview.updateAttributes(%s)'%model)
+        print(('AttributesPreview.updateAttributes(%s)'%model))
         if not model and self.source:
             try:
                 if hasattr(self.source,'formula'): model = self.source.formula
                 elif hasattr(self.source,'__call__'): model = self.source()
                 else: model = str(self.source or '')
-            except: print(traceback.format_exc())
-        print 'In AttributesPreview.updateAttributes(%s)'%model
+            except: print((traceback.format_exc()))
+        print('In AttributesPreview.updateAttributes(%s)'%model)
         if fandango.isSequence(model): 
             model = sorted(model)
         else: 
@@ -680,7 +679,7 @@
         
     @staticmethod
     def showEmptyAlarmPreview(gui=None):
-        print('In AlarmPreview.showEmptyAlarmPreview(%s)'%type(gui))
+        print(('In AlarmPreview.showEmptyAlarmPreview(%s)'%type(gui)))
         form = getattr(gui,'_AlarmFormulaPreview',None) or AlarmPreview()
         form.setModal(False)
         if not gui:
@@ -697,7 +696,7 @@
         #tag = getattr(tag,'tag',tag) or self.tag
         #formula = formula or getattr(obj,'formula','') or self.formula
         self.org_formula = formula
-        print 'In AlarmPreview.updateStyle(%s,%s)' %(tag,formula)
+        print('In AlarmPreview.updateStyle(%s,%s)' %(tag,formula))
         try:
             self.setLayout(Qt.QVBoxLayout())
             self.setMinimumSize(500, 500)
@@ -715,11 +714,11 @@
             #upperPanel.updateFormula(formula)
             if self.upperPanel.formula: self.lowerPanel.updateAttributes()
             if show: self.show()
-            print 'AlarmGUI.showAlarmPreview(%s) finished.'%tag
-            print self.frame.sizes()
+            print('AlarmGUI.showAlarmPreview(%s) finished.'%tag)
+            print(self.frame.sizes())
         except:
-            print traceback.format_exc()
-            print 'Unable to showAlarmPreview(%s)'%tag
+            print(traceback.format_exc())
+            print('Unable to showAlarmPreview(%s)'%tag)
             
     def closeEvent(self,event):
         self.upperPanel.onClose()
--- ./panic/gui/actions.py	(original)
+++ ./panic/gui/actions.py	(refactored)
@@ -43,7 +43,7 @@
         self.popMenu = QtGui.QMenu(self)
         view = getattr(self,'view')
         items = self.getSelectedAlarms(extend=False)
-        print('In onContextMenu(%s)'%str([a.tag for a in items]))
+        print(('In onContextMenu(%s)'%str([a.tag for a in items])))
         alarm = self.getCurrentAlarm()
         #self.popMenu.addAction(getThemeIcon("face-glasses"), 
         # "Preview Attr. Values",self.onSelectAll)
@@ -122,7 +122,7 @@
 
     def onEdit(self,edit=True):
         alarm = self.getCurrentAlarm()
-        print "AlarmGUI.onEdit(%s)"%alarm
+        print("AlarmGUI.onEdit(%s)"%alarm)
         forms = [f for f in WindowManager.WINDOWS 
             if isinstance(f,AlarmForm) and f.getCurrentAlarm().tag==alarm.tag] 
         
@@ -177,7 +177,7 @@
                              receivers=obj.receivers, 
                              severity=obj.severity)
                 self.onReload()
-            except Exception,e:
+            except Exception as e:
                 Qt.QMessageBox.critical(self,"Error!",str(e), 
                                                 QtGui.QMessageBox.AcceptRole, 
                                                 QtGui.QMessageBox.AcceptRole)
@@ -224,7 +224,7 @@
           self.snapi = get_snap_api()
 
         if self.snapi:
-          self.ctx_names=[c.name for c in self.snapi.get_contexts().values()]
+          self.ctx_names=[c.name for c in list(self.snapi.get_contexts().values())]
 
         if alarm in self.ctx_names: 
           self.ahApp = ahWidget()
@@ -299,7 +299,7 @@
             raise Exception('comment was too short')
         comment = get_user()+': '+str(comment)
         for alarm in alarms:
-            print('ResetAlarm(%s):%s'%(alarm.tag,comment))
+            print(('ResetAlarm(%s):%s'%(alarm.tag,comment)))
             alarm.reset(comment)
             
         emitValueChanged(self)
@@ -342,7 +342,7 @@
                 alarm.renounce(comment)
                 
         emitValueChanged(self)
-    except Exception,e:
+    except Exception as e:
         msg = traceback.format_exc() if e.message!=comment_error else e.message
         v = QtGui.QMessageBox.warning(self,'Warning',
                                       msg,QtGui.QMessageBox.Ok)
@@ -375,14 +375,14 @@
         
         for alarm in alarms:
             if not alarm.disabled and action == 'DISABLED':
-                print('Disabling %s'%alarm.tag)
+                print(('Disabling %s'%alarm.tag))
                 alarm.disable(comment)
             elif alarm.disabled:
-                print('Enabling %s'%alarm.tag)
+                print(('Enabling %s'%alarm.tag))
                 alarm.enable(comment)
 
         emitValueChanged(self)
-    except Exception,e:
+    except Exception as e:
         msg = traceback.format_exc() if e.message!=comment_error else e.message
         v = QtGui.QMessageBox.warning(self,'Warning',
                                       msg,QtGui.QMessageBox.Ok)
@@ -404,7 +404,7 @@
                     if isinstance(f,AlarmForm)]
         emitValueChanged(parent)
         
-    except Exception,e:
+    except Exception as e:
         msg = traceback.format_exc()
         v = QtGui.QMessageBox.warning(parent,'Warning',
                                       msg,QtGui.QMessageBox.Ok)
--- ./panic/gui/status.py	(original)
+++ ./panic/gui/status.py	(refactored)
@@ -50,8 +50,8 @@
 def main(*args):
     args = args or sys.argv[1:]
     if '--raw' in args:
-        print(get_panic_status(
-            [a for a in args if not a.startswith('-')][-1:]))
+        print((get_panic_status(
+            [a for a in args if not a.startswith('-')][-1:])))
     else:
         qapp = getApplication()
         w = PanicStatus()
--- ./panic/gui/devattrchange.py	(original)
+++ ./panic/gui/devattrchange.py	(refactored)
@@ -6,7 +6,7 @@
 
 import panic, fandango
 from fandango.qt import Qt, QtCore, QtGui
-from utils import iValidatedWidget,getThemeIcon
+from .utils import iValidatedWidget,getThemeIcon
 
 
 class dacWidget(QtGui.QWidget):
@@ -27,7 +27,7 @@
 class devattrchangeForm(iValidatedWidget,object):
     api=None
     def __init__(self,api=None):
-        print 'creating devattrchangeForm ...'
+        print('creating devattrchangeForm ...')
         type(self).api = api or self.api or panic.current()
         object.__init__(self)
     
@@ -88,13 +88,13 @@
         devList=self.api.devices
         [self.deviceCombo.addItem(QtCore.QString(d)) for d in self.api.devices]
         self.deviceCombo.model().sort(0, Qt.Qt.AscendingOrder)
-        print 'setDevCombo(%s)'%device
+        print('setDevCombo(%s)'%device)
         if device in self.api.devices: 
             i = self.deviceCombo.findText(device)
-            print '\t%s at %s'%(device,i)
+            print('\t%s at %s'%(device,i))
             self.deviceCombo.setCurrentIndex(i)
         else:
-            print '\t%s not in AlarmsAPI!'%device
+            print('\t%s not in AlarmsAPI!'%device)
 
     def buildList(self,device=None):
         self.tableWidget.blockSignals(True)
@@ -110,7 +110,7 @@
             # default values replacement
         else:
             data = {}
-        print '%s properties: %s' % (device,data)
+        print('%s properties: %s' % (device,data))
         rows=len(data)
         self.tableWidget.setColumnCount(2)
         self.tableWidget.setRowCount(rows)
@@ -148,7 +148,7 @@
                 if '/' not in s: s = 'PyAlarm/%s'%s
                 import fandango.tango as ft
                 ft.add_new_device(s,'PyAlarm',d)
-                print('%s - %s: created!'%(s,d))
+                print(('%s - %s: created!'%(s,d)))
             except:
                 traceback.print_exc()
             self.api.load()
@@ -165,9 +165,9 @@
                 return
             prop=str(self.tableWidget.item(row,0).text())
             value=str(self.tableWidget.item(row,1).text())
-            print 'DeviceAttributeChanger.onEdit(%s,%s = %s)'%(dev,prop,value)
+            print('DeviceAttributeChanger.onEdit(%s,%s = %s)'%(dev,prop,value))
             
-            alarms = dev.alarms.keys()
+            alarms = list(dev.alarms.keys())
             v = QtGui.QMessageBox.warning(None,'Write Properties',\
                 'The following alarms will be afected:\n\n'+
                 '\n'.join(alarms)+'\n\nAre you sure?',
@@ -186,7 +186,7 @@
                 self.buildList()
                 return
 
-        except Exception,e:
+        except Exception as e:
             Qt.QMessageBox.warning(self.Form,"Warning",'Exception: %s'%e)
         finally:
             self.buildList()
--- ./panic/gui/gui.py	(original)
+++ ./panic/gui/gui.py	(refactored)
@@ -6,7 +6,7 @@
 
 import sys, re, os, traceback, time, json
 from pprint import pformat
-import threading, Queue
+import threading, queue
 
 import fandango as fn
 import fandango.tango as ft
@@ -70,7 +70,7 @@
 
 OPEN_WINDOWS = []
 
-import utils as widgets
+from . import utils as widgets
 widgets.TRACE_LEVEL = -1
 
     ###########################################################################
@@ -146,7 +146,7 @@
         self.snapi = None
         self.ctx_names = []
 
-        if not self.api.keys(): trace('NO ALARMS FOUND IN DATABASE!?!?')
+        if not list(self.api.keys()): trace('NO ALARMS FOUND IN DATABASE!?!?')
         #AlarmRow.TAG_SIZE = 1+max([len(k) for k in self.api] or [40])
         
         N = len(self.getAlarms())
@@ -200,11 +200,11 @@
         # THIS METHOD WILL CHECK FOR CHANGES IN FILTERS (not only severities)
         try:
             if model!= self.regEx:
-                print('AlarmGUI.setModel(%s)'%model)
+                print(('AlarmGUI.setModel(%s)'%model))
                 self._ui.regExLine.setText(model or self.default_regEx)
                 self.onRegExUpdate()
         except:
-            print traceback.format_exc()
+            print(traceback.format_exc())
 
     ###########################################################################
     # AlarmList
@@ -241,7 +241,7 @@
         # TO UPDATE FILTERS USE onRefresh INSTEAD
         try:
             trace('onReload(%s)'%self.RELOAD_TIME)
-            print '+'*80
+            print('+'*80)
             now = time.time()
             trace('%s -> AlarmGUI.onReload() after %f seconds'%(
               now,now-self.last_reload))
@@ -291,10 +291,10 @@
         self._ui.statusLabel.setText(text)
         if not nones and self.splash:
             try: 
-                print 'closing splash ...'
+                print('closing splash ...')
                 self.splash.finish(None)
                 self.splash = None
-            except: print traceback.format_exc()          
+            except: print(traceback.format_exc())          
             
         return
       
@@ -312,7 +312,7 @@
                 models = self.api.parse_attributes(a.formula)
                 devices = sorted(set(fn.tango.parse_tango_model(m)['device'] 
                                      for m in models))
-                print 'onItemSelected(%s): %s'%(a,devices)
+                print('onItemSelected(%s): %s'%(a,devices))
                 self.emit(Qt.SIGNAL('devicesSelected'),'|'.join(devices+tags))
         except: traceback.print_exc()      
             
@@ -346,7 +346,7 @@
     
     def getSelectedAlarms(self,extend=False):
         rows = self.getSelectedItems(extend)
-        return filter(bool,(self.getCurrentAlarm(r) for r in rows))
+        return list(filter(bool,(self.getCurrentAlarm(r) for r in rows)))
       
     def getVisibleRows(self,margin=10):
         ql = self._ui.listWidget
@@ -354,8 +354,8 @@
                 ql.visibleRegion().contains(
                   ql.visualItemRect(ql.item(i)))]
         if rows:
-            rows = range(max((0,rows[0]-margin)),
-                  min((ql.count(),rows[-1]+margin)))
+            rows = list(range(max((0,rows[0]-margin)),
+                  min((ql.count(),rows[-1]+margin))))
         return rows
       
     def setScrollHook(self,hook):
@@ -653,7 +653,7 @@
         #dct = {'tag':regexp or self.default_regEx}
         #if not any(device,r
         if userfilter:
-            print('getFilters(%s)'%str(userfilter))
+            print(('getFilters(%s)'%str(userfilter)))
             ff = self.api.get_user_filters()[userfilter]
             filters.extend(ff)
             self._ui.comboBoxx.setToolTip(pformat(ff))
@@ -716,29 +716,29 @@
         self._ui.comboBoxx.setEnabled(True)
         if source =='Devices':
             r,sort,values = 1,True,sorted(set(a.device 
-                                              for a in self.api.values()))
+                                              for a in list(self.api.values())))
             print(values)
         elif source =='Domain':
             r,sort,values = 1,True,sorted(set(a.device.split('/')[-3]
-                                              for a in self.api.values()))
+                                              for a in list(self.api.values())))
         elif source =='Family':
             devs = sorted(set(a.device for a in self.getAlarms()))
             values = sorted(set(a.device.split('/')[-2]
-                                              for a in self.api.values()))
-            print(devs,values)
+                                              for a in list(self.api.values())))
+            print((devs,values))
             r,sort,values = 1,True,values
             
         elif source in ('Annunciator','Receivers'):
             #r,sort,values = 2,True,list(set(a for a in self.api.phonebook.keys() for l in self.api.values() if a in l.receivers))
-            r,sort,values = 2,True,list(set(s for a in self.api.values() 
+            r,sort,values = 2,True,list(set(s for a in list(self.api.values()) 
                     for s in ['SNAP','SMS']+
                     [r.strip() for r in a.receivers.split(',') if r.strip()]))
             
         elif source =='Priority':
-            r,sort,values = 3,False,SEVERITIES.keys()
+            r,sort,values = 3,False,list(SEVERITIES.keys())
             
         elif source =='UserFilters':
-            r,sort,values = 3,False,['']+self.api.get_user_filters().keys()
+            r,sort,values = 3,False,['']+list(self.api.get_user_filters().keys())
             
         #@TODO
         #elif source =='Hierarchy':
@@ -752,7 +752,7 @@
             ss = [''] #empty filter to use default_regEx instead
             ss.append('|'.join(ACTIVE_STATES))
             ss.append('|'.join(DISABLED_STATES))
-            ss.extend(AlarmStates.keys())
+            ss.extend(list(AlarmStates.keys()))
             r,sort,values = 0,False,ss
             
         self.setComboBox(self._ui.comboBoxx,values=values,sort=sort)
@@ -781,8 +781,8 @@
     def onFilter(self,*args):
         """Forces an update of alarm list order and applies filters 
         (do not reload database)."""
-        print('onFilter() '+'*'*60)
-        print(self.getFilters())
+        print(('onFilter() '+'*'*60))
+        print((self.getFilters()))
         self.buildList(changed=True)
         self.showList()
         self.refreshTimer.setInterval(self.REFRESH_TIME)
@@ -806,7 +806,7 @@
             text = 'Enter a name to save your filter in Tango Database'
             filters = self.api.get_user_filters()
             name, ok = QtGui.QInputDialog.getItem(self,'Save Filter As',
-                                        text,['']+filters.keys(),True)
+                                        text,['']+list(filters.keys()),True)
             if not ok: return
             if ok and len(str(name)) < min_comment:
                 raise Exception(comment_error)
@@ -821,7 +821,7 @@
             filters.update({name:self.getFilters()})
             self.api.set_user_filters(filters,overwrite=True)
             self.onReload()
-        except Exception,e:
+        except Exception as e:
             #msg = traceback.format_exc()
             v = QtGui.QMessageBox.warning(self,'Warning',
                                         e.message,QtGui.QMessageBox.Ok)
@@ -893,7 +893,7 @@
             trace('showing splash ... %s'%px.size())
             
         except: 
-            print traceback.format_exc()
+            print(traceback.format_exc())
             
         if self.mainwindow:
             
@@ -981,7 +981,7 @@
         tmw.viewMenu.connect(tmw.viewMenu,
             Qt.SIGNAL('aboutToShow()'),alarmApp.setViewMenu)
         
-        from phonebook import PhoneBook
+        from .phonebook import PhoneBook
         alarmApp.tools['bookApp'] = WindowManager.addWindow(
             PhoneBook(container=tmw))
         tmw.toolsMenu.addAction(getThemeIcon("x-office-address-book"), 
@@ -1058,7 +1058,7 @@
             "View Raw",lambda s=self:alarmApp.tools['rawview'].setModel(self))
         [o.addAction(*alarm_panel_action) for o in (tmw.toolsMenu,toolbar)]          
             
-        print('Toolbars created after %s seconds'%(time.time()-t0))
+        print(('Toolbars created after %s seconds'%(time.time()-t0)))
         tmw.setCentralWidget(alarmApp)
         tmw.show()
         return tmw        
@@ -1108,12 +1108,12 @@
         #if not views or not any(views):
             #sys.exit(-1)
 
-        print '='*80
+        print('='*80)
         trace('launching AlarmGUI ... %s, %s'%(args,opts))
-        print '='*80
+        print('='*80)
         alarmApp = AlarmGUI(filters='|'.join(args),
                             options=opts,mainwindow=True)
-        print('AlarmGUI created after %s seconds'%(time.time()-t0))    
+        print(('AlarmGUI created after %s seconds'%(time.time()-t0)))    
         #alarmApp.tmw.show()
         n = uniqueapp.exec_()
 
@@ -1141,7 +1141,7 @@
     
     def printRows(self):
         for row in self._ui.listWidget.selectedItems():
-          print row.__repr__()
+          print(row.__repr__())
     
     def saveToFile(self):
         filename = str(Qt.QFileDialog.getSaveFileName(
@@ -1200,7 +1200,7 @@
             return filename
             
     def setViewMenu(self,action=None):
-        print 'In AlarmGUI.setViewMenu(%s)'%action
+        print('In AlarmGUI.setViewMenu(%s)'%action)
         self.mainwindow.viewMenu.clear()
         windows = WindowManager.getWindowsNames()
         for w in windows:
--- ./panic/gui/htmlview.py	(original)
+++ ./panic/gui/htmlview.py	(refactored)
@@ -1,4 +1,4 @@
-from utils import Qt, QtCore, QtGui, getThemeIcon
+from .utils import Qt, QtCore, QtGui, getThemeIcon
 from taurus.qt.qtgui.panel import TaurusForm
 
 import panic, fandango, taurus
--- ./panic/gui/panel.py	(original)
+++ ./panic/gui/panel.py	(refactored)
@@ -25,7 +25,7 @@
         #QtKlass.mousePressEvent(self, event)
         Qt.QLabel.mousePressEvent(self,event)
         if self._alarm:
-            print('mouse over %s'%(self._alarm.tag))
+            print(('mouse over %s'%(self._alarm.tag)))
             self.parent().setCurrentAlarm(self._alarm)
             self.parent()._manager = self            
             if event.button() == Qt.Qt.RightButton: 
@@ -42,9 +42,9 @@
         self.bar.setMaximumHeight(50)
         self.modelline = Qt.QLineEdit()
         self.modelbt = Qt.QPushButton('Apply')
-        map(self.bar.layout().addWidget,(self.modelline,self.modelbt))
+        list(map(self.bar.layout().addWidget,(self.modelline,self.modelbt)))
         self.main = QAlarmPanel(self)
-        map(self.layout().addWidget,(self.bar,self.main))    
+        list(map(self.layout().addWidget,(self.bar,self.main)))    
         
     def setModel(self,model=None):
         if model is None: model = str(self.modelline.text())
@@ -56,7 +56,7 @@
     REFRESH_TIME = 3000
     
     def setModel(self,model=None,rows=0,cols=0,side=0,fontsize=0,**kwargs):
-        print('QAlarmPanel.setModel(%s)'%model)
+        print(('QAlarmPanel.setModel(%s)'%model))
         import panic,math
         
         if isinstance(model,AlarmView):
@@ -105,9 +105,9 @@
         self.setWindowIcon(Qt.QIcon(px))        
         #self.labels[self.rows-1][self.cols-1].resize(50,50)        
 
-        print('QAlarmPanel(%s): %d alarms , %d cols, %d rows: %s'
+        print(('QAlarmPanel(%s): %d alarms , %d cols, %d rows: %s'
               %(model,len(self.tags),self.cols, self.rows, 
-                fd.log.shortstr(self.tags)) + '\n'+'#'*80)
+                fd.log.shortstr(self.tags)) + '\n'+'#'*80))
                 
         self.refreshTimer = Qt.QTimer()
         Qt.QObject.connect(self.refreshTimer, 
@@ -246,7 +246,7 @@
         
     @staticmethod
     def minsplit(seq,sep='_',minsplit=None):
-        if minsplit is None: minsplit = max(map(len,seq.split(sep)))
+        if minsplit is None: minsplit = max(list(map(len,seq.split(sep))))
         o,r,i = seq,[],0
         while 0 <= i < len(seq):
             seq = seq[i:]
@@ -265,7 +265,7 @@
     def main(*args):
         import fandango,fandango.qt,sys
         opts = fandango.linos.sysargs_to_dict(split=True) #(args,opts)
-        print('in QAlarmPanel.main(%s,%s)'%(args,opts))
+        print(('in QAlarmPanel.main(%s,%s)'%(args,opts)))
         filters = fandango.first(args or opts[0] or ['*'])
         app = fandango.qt.getApplication()
         w = QAlarmPanel()
--- ./panic/gui/ui_gui.py	(original)
+++ ./panic/gui/ui_gui.py	(refactored)
@@ -4,10 +4,10 @@
 GPL Licensed 
 """
 
-from utils import Qt, QtCore, QtGui
+from .utils import Qt, QtCore, QtGui
 import taurus
 from taurus.qt.qtgui.panel import TaurusForm
-from utils import getThemeIcon
+from .utils import getThemeIcon
 
 class Ui_AlarmList(object):
     def setupUi(self, Form):
--- ./panic/gui/__init__.py	(original)
+++ ./panic/gui/__init__.py	(refactored)
@@ -1,5 +1,5 @@
 
-from gui import *
-try: from alarmhistory import *
-except: print 'Unable to load alarmhistory'
+from .gui import *
+try: from .alarmhistory import *
+except: print('Unable to load alarmhistory')
 
--- ./panic/gui/phonebook.py	(original)
+++ ./panic/gui/phonebook.py	(refactored)
@@ -1,7 +1,7 @@
 import sys, panic, traceback
-from utils import Qt, QtCore, QtGui
-from utils import getThemeIcon
-from utils import iValidatedWidget
+from .utils import Qt, QtCore, QtGui
+from .utils import getThemeIcon
+from .utils import iValidatedWidget
 
 class PhoneBook(QtGui.QWidget):
     def __init__(self,parent=None,container=None):
@@ -117,7 +117,7 @@
                 message='Type email address\n'
                 raise Exception(message)
             else:
-                print 'onAdd.edit_phoneBook(%s,%s,(%s))'%(name,email,section)
+                print('onAdd.edit_phoneBook(%s,%s,(%s))'%(name,email,section))
                 self.api.edit_phonebook(name,email,section)
         except Exception:
             Qt.QMessageBox.critical(None,"Error", traceback.format_exc())
@@ -208,8 +208,8 @@
         ##alter=(str(self.tableWidget.item(pid,1).text()))
         ##self.api.edit_phonebook(alter)
         #self.buildList()
-        name,value = map(str,(self.tableWidget.item(self.tableWidget.currentRow(),0).text(),self.tableWidget.item(self.tableWidget.currentRow(),1).text()))
-        print 'PhoneBook.onEdit(%s,%s)'%(name,value)
+        name,value = list(map(str,(self.tableWidget.item(self.tableWidget.currentRow(),0).text(),self.tableWidget.item(self.tableWidget.currentRow(),1).text())))
+        print('PhoneBook.onEdit(%s,%s)'%(name,value))
         try:
             self.prompt = Qt.QWidget()
             self.promptUi = PhoneBookEntry(self)
@@ -218,7 +218,7 @@
             self.promptUi.emailLine.setText(value)
             self.prompt.show()
         except:
-            print traceback.format_exc()
+            print(traceback.format_exc())
 
     def onAdd(self):
         try:
@@ -227,10 +227,10 @@
             self.promptUi.addSetupUi(self.prompt)
             self.prompt.show()
         except:
-            print traceback.format_exc()
+            print(traceback.format_exc())
 
     def onRemove(self):
-        name,value = map(str,(self.tableWidget.item(self.tableWidget.currentRow(),0).text(),self.tableWidget.item(self.tableWidget.currentRow(),1).text()))
+        name,value = list(map(str,(self.tableWidget.item(self.tableWidget.currentRow(),0).text(),self.tableWidget.item(self.tableWidget.currentRow(),1).text())))
         reply=Qt.QMessageBox.question(None,"Remove","Do You Want to Remove %s?"%name, Qt.QMessageBox.Yes | QtGui.QMessageBox.No, QtGui.QMessageBox.Yes)
         if reply == QtGui.QMessageBox.Yes:
             try:
@@ -238,7 +238,7 @@
                 self.onRefresh()
                 Qt.QMessageBox.information(None,"Remove","%s Removed"%name)
             except:
-                print traceback.format_exc()
+                print(traceback.format_exc())
                 Qt.QMessageBox.critical(None,"Problem", "Could not remove selected person<br>")
 
     def onRefresh(self):
--- ./panic/gui/toolbar.py	(original)
+++ ./panic/gui/toolbar.py	(refactored)
@@ -1,5 +1,5 @@
 import sys, PyTango
-from utils import Qt
+from .utils import Qt
 from taurus.qt.qtgui import container
 from taurus.qt.qtgui.panel import TaurusForm
 
@@ -18,7 +18,7 @@
     tmw.show()
     s=tmw.splashScreen()
     s.finish(tmw)
-    print '*'*80
+    print('*'*80)
 
     toolbar = PanicToolbar(tmw)
     tmw.addToolBar(toolbar)
--- ./panic/gui/alarmhistory.py	(original)
+++ ./panic/gui/alarmhistory.py	(refactored)
@@ -5,7 +5,7 @@
 """
 
 import panic, fandango
-from utils import *
+from .utils import *
 from taurus.qt.qtgui.panel import TaurusForm
 from operator import itemgetter
 
@@ -101,7 +101,7 @@
         pos=self.alarmCombo.currentIndex()
         self.alarmCombo.clear()
         self.alarms=self.panicApi.alarms
-        for a in self.alarms.items():
+        for a in list(self.alarms.items()):
             self.alarmCombo.addItem(self.alarms[a[0]].tag+': '+self.alarms[a[0]].formula)
         self.alarmCombo.model().sort(0, Qt.Qt.AscendingOrder)
         self.alarmCombo.insertItem(0,QtCore.QString('All'))
@@ -127,7 +127,7 @@
             if (alarm=='All'):
                 ctxs=[]
                 self.alarms=self.panicApi.alarms
-                for a in self.alarms.items():
+                for a in list(self.alarms.items()):
                     if(self.snapApi.db.search_context(self.alarms[a[0]].tag)):
                         ctx=self.snapApi.db.search_context(self.alarms[a[0]].tag)
                         for c in ctx: ctxs.append(c)
@@ -140,7 +140,7 @@
             data=[]
             for cid in cids:
                 ctx=self.snapApi.get_context(cid)
-                snaps=ctx.get_snapshots().values()
+                snaps=list(ctx.get_snapshots().values())
                 for s in snaps:
                     data.append([s[0],ctx.name,s[1]])
             data.sort(key=itemgetter(0), reverse=True)
@@ -195,7 +195,7 @@
                 self.ctx_id=c['id_context']
                 break
         self.ctx=self.snapApi.get_context(self.ctx_id)
-        res=sorted(self.ctx.get_snapshots().items(), reverse=True)
+        res=sorted(list(self.ctx.get_snapshots().items()), reverse=True)
         pos=0;
         for s in res:
             if str(s[1][0])==self.snap_date: break
--- ./panic/gui/row.py	(original)
+++ ./panic/gui/row.py	(refactored)
@@ -8,11 +8,11 @@
 import PyTango, fandango, taurus, taurus.qt.qtgui.base
 from fandango.functional import *
 from fandango import Catched
-from utils import QtCore, QtGui, Qt, TRACE_LEVEL, get_user
+from .utils import QtCore, QtGui, Qt, TRACE_LEVEL, get_user
 from taurus.core import TaurusEventType
 from taurus.qt.qtgui.base import TaurusBaseComponent
-from editor import AlarmForm
-from utils import getAlarmTimestamp,trace,clean_str,\
+from .editor import AlarmForm
+from .utils import getAlarmTimestamp,trace,clean_str,\
   getThemeIcon,getAttrValue, SNAP_ALLOWED, WindowManager, AlarmPreview
 #from htmlview import *
 
--- ./panic/gui/views.py	(original)
+++ ./panic/gui/views.py	(refactored)
@@ -40,7 +40,7 @@
             self.connect(self._timer,Qt.SIGNAL("timeout()"),
                          self.valueChanged)
             self._timer.start(refresh)
-            print('AlarmForm._timer(%s)'%refresh)
+            print(('AlarmForm._timer(%s)'%refresh))
         self.show()
         
     def valueChanged(self):
@@ -60,7 +60,7 @@
             views = ft.get_class_devices('PanicViewDS')
             views.append(ft.get_tango_host())
 
-        print('ViewChooser(%s)'%views)
+        print(('ViewChooser(%s)'%views))
         self.view = ''
         self.views = fd.dicts.SortedDict()
         for v in views:
@@ -76,7 +76,7 @@
         self.setLayout(Qt.QVBoxLayout())
         self.layout().addWidget(Qt.QLabel('Choose an AlarmView'))
         self.chooser = Qt.QComboBox()
-        self.chooser.addItems(self.views.keys())
+        self.chooser.addItems(list(self.views.keys()))
         self.layout().addWidget(self.chooser)
         self.button = Qt.QPushButton('Done')
         self.layout().addWidget(self.button)
@@ -91,7 +91,7 @@
         except:
             traceback.print_exc()
             self.view = 'err'
-        print('ViewChooser(%s) => %s'%(txt,self.view))
+        print(('ViewChooser(%s) => %s'%(txt,self.view)))
         return self.view
         
     def done(self,*args):
--- ./panic/gui/editor.py	(original)
+++ ./panic/gui/editor.py	(refactored)
@@ -13,8 +13,8 @@
 import panic.gui.actions
 
 #AlarmFormula widget is added in the ui_data.py file
-from ui_data import Ui_Data,Ui_ReceiversLine
-from ui_data import uiBodyForm,uiRowForm
+from .ui_data import Ui_Data,Ui_ReceiversLine
+from .ui_data import uiBodyForm,uiRowForm
 
 #get_next_index = lambda d: max([0]+list(d))+1
 
@@ -45,7 +45,7 @@
             self._timer = Qt.QTimer()
             self.connect(self._timer,Qt.SIGNAL("timeout()"), self.valueChanged)
             self._timer.start(refresh)
-            print('AlarmForm._timer(%s)'%refresh)
+            print(('AlarmForm._timer(%s)'%refresh))
             
     def setCurrentAlarm(self,alarm=None):
         if isinstance(alarm,panic.Alarm):
@@ -54,7 +54,7 @@
             self._currentAlarm = panic.Alarm('')
         else:
             self._currentAlarm = self.api[alarm]
-        print 'AlarmForm.setCurrentAlarm(%s)'%self._currentAlarm
+        print('AlarmForm.setCurrentAlarm(%s)'%self._currentAlarm)
         try: self._wi.formulaTextEdit.setModel(self._currentAlarm)
         except: traceback.print_exc()
         return self._currentAlarm
@@ -107,7 +107,7 @@
             formula=self._wi.formulaTextEdit.toPlainText(),parent=self.parent())
         self.preview.connect(self.preview.upperPanel,Qt.SIGNAL('onSave'),
             lambda obj,s=self:(s.enableEditForm(False),s.setAlarmData(obj)))
-        from utils import WindowManager
+        from .utils import WindowManager
         WindowManager.addWindow(self.preview)
         self.preview.show()
         
@@ -132,19 +132,19 @@
     def onEdit(self,alarm=None):
         if alarm: self.setCurrentAlarm(alarm)
         alarm = self.getCurrentAlarm()
-        print "AlarmForm.onEdit(%s)"%alarm
+        print("AlarmForm.onEdit(%s)"%alarm)
         
         self.setAlarmData(alarm)
         self.enableEditForm(True)
         
     def onNew(self):
-        print'onNew()'
+        print('onNew()')
         self.clearAlarmData()
         self.enableEditForm(True)
         self._tvl.updateStyle()
 
     def onSave(self):
-        print'onSave()'+'<'*80
+        print('onSave()'+'<'*80)
         if self.checkDataFields() and \
                 self.validate('onSave',self._currentAlarm.tag):
             old_name = self.getCurrentAlarm().tag
@@ -156,7 +156,7 @@
         self.valueChanged()
 
     def onCancel(self):
-        print'onCancel()'
+        print('onCancel()')
         self.formulaeditor.Clr()
         self.setAlarmData()
         self.enableEditForm(not(self.getCurrentAlarm() 
@@ -181,11 +181,11 @@
     def valueChanged(self,forced=False):
         timed = hasattr(self,'_timer')
         alarm = self.getCurrentAlarm()
-        print('AlarmForm(%s).valueChanged(%s,%s)'%(alarm.tag,forced,timed))
+        print(('AlarmForm(%s).valueChanged(%s,%s)'%(alarm.tag,forced,timed)))
         if timed or forced:
             dis = not alarm.get_enabled(force=True)
             ack = alarm.get_acknowledged(force=True)
-            print('\tdis,ack = ',(dis,ack))
+            print(('\tdis,ack = ',(dis,ack)))
         if timed:
             alarm.set_active(alarm.get_time(True))
             alarm.set_state()            
@@ -222,7 +222,7 @@
         self._dataWidget._wi.horizontalLane.addWidget(self.w)
 
     def clearAlarmData(self):
-        print "AlarmForm.clearAlarmData()"
+        print("AlarmForm.clearAlarmData()")
         self.setCurrentAlarm()
         self._dataWidget._wi.nameLineEdit.clear()
         self._dataWidget._wi.deviceLineEdit.clear()
@@ -242,7 +242,7 @@
         #This method is called from listWidget.currentRowChanged() event
         
         if alarm: self.setCurrentAlarm(alarm)
-        print 'AlarmForm.setAlarmData(%s)'%(self.getCurrentAlarm())
+        print('AlarmForm.setAlarmData(%s)'%(self.getCurrentAlarm()))
         self.setWindowTitle('ALARM: %s'%self.getCurrentAlarm().tag)
 
         #print 'PanicGUI.setAlarmData(%d,%s@%s): %s-%s since %s,dis:%s,ack:%s'%(
@@ -308,7 +308,7 @@
             #def prepareDataWidget(self)
             alarm = self.getCurrentAlarm()
             #Puts the widget in edit mode
-            print 'In prepareDataWidget(%s)'%alarm.tag
+            print('In prepareDataWidget(%s)'%alarm.tag)
             
             for i in range(self._dataWidget._wi.severityCombo.count()):
                 if str(self._dataWidget._wi.severityCombo.itemText(i)).lower()\
@@ -316,7 +316,7 @@
                     self._dataWidget._wi.severityCombo.setCurrentIndex(i)
                     break
             self.setComboBox(self._dataWidget._wi.deviceCombo,
-                             values=['']+self.api.devices.keys(),sort=True)
+                             values=['']+list(self.api.devices.keys()),sort=True)
             if self.getCurrentAlarm().device:
                 for i in range(self._dataWidget._wi.deviceCombo.count()):
                     if str(self._dataWidget._wi.deviceCombo.itemText(i)
@@ -325,7 +325,7 @@
                         break
                     
             self.setComboBox(self._receiversLine._wi.receiversCombo,
-                             self.api.phonebook.keys(),sort=True)
+                             list(self.api.phonebook.keys()),sort=True)
             self._tvl.updateStyle()
             #End of prepareDataWidget(self)
             
@@ -354,7 +354,7 @@
             ('formula',str(widget._wi.formulaTextEdit.toPlainText()).strip()),
             ('severity',str(widget._wi.severityCombo.currentText())),
             ])
-        print 'getDataFields(%s): %s'%(data['tag'],data)
+        print('getDataFields(%s): %s'%(data['tag'],data))
         return data
 
     def checkDataFields(self):
@@ -372,7 +372,7 @@
             return True
 
     def saveData(self, old_name=None):
-        print 'In saveData(%s)'%old_name
+        print('In saveData(%s)'%old_name)
         data = self.getDataFields()
         widget = self._dataWidget
         widget._wi.deviceLineEdit.setText(data['device'])
@@ -382,16 +382,16 @@
         alarm = self.api.alarms.get(tag,None)
         
         if not old_name or old_name not in self.api:
-            print "\tAlarm doesn't exist... creating new"
+            print("\tAlarm doesn't exist... creating new")
             try:
                 self.api.add(**data)
-            except Exception,e:
+            except Exception as e:
                 Qt.QMessageBox.critical(self,"Error!",str(e), 
                     QtGui.QMessageBox.AcceptRole, QtGui.QMessageBox.AcceptRole)
-                print traceback.format_exc()
+                print(traceback.format_exc())
         
         elif old_name == tag:
-            print "\tAlarm exists ... modifying fields (%s)"%str(data.values())
+            print("\tAlarm exists ... modifying fields (%s)"%str(list(data.values())))
             if device!=self.api[tag].device:
                 self.api.rename(tag,tag,new_device=device)
                 alarm = self.api[tag]
@@ -406,7 +406,7 @@
                 QtGui.QMessageBox.AcceptRole, QtGui.QMessageBox.AcceptRole)
             
         else:
-            print "\tAlarm renamed (%s -> %s)"%(old_name,tag)
+            print("\tAlarm renamed (%s -> %s)"%(old_name,tag))
             if device: self.api.rename(old_name,new_tag=tag,new_device=device)
             else: self.api.rename(old_name,new_tag=tag)
             alarm = self.api[tag]
@@ -416,7 +416,7 @@
             # Renamed alarms will not appear until the next onReload() call
             if SNAP_ALLOWED:
                 try:
-                    print('\tRenaming Alarm context %s to %s'%(old_name,tag))
+                    print(('\tRenaming Alarm context %s to %s'%(old_name,tag)))
                     snapi = get_snap_api()
                     self.ctx_list = snapi.get_contexts()
                     for cid in self.ctx_list:
@@ -424,11 +424,11 @@
                             and self.ctx_list[cid].reason=='ALARM'):
                             snapi.db.rename_context(cid, tag.lower())
                             break
-                except: print 'Renaming context: Failed!\n%s'%traceback.format_exc()
+                except: print('Renaming context: Failed!\n%s'%traceback.format_exc())
         
         self.setAlarmData(tag)
         self.valueChanged()
-        print 'Out of saveNewData()'
+        print('Out of saveNewData()')
     
     ###########################################################################
     # AlarmActions,object
@@ -618,7 +618,7 @@
             scrollarea = self._ui.scrollAreaWidgetContents
             scrollarea.layout().insertWidget(i-1,self.object)
         else:
-            print "widget is already first"
+            print("widget is already first")
             Qt.QMessageBox.warning(self,"Warning",
                                    "What you are about to do is impossible.")
         self.UpdateText()
@@ -634,14 +634,14 @@
             self.widget.close()
             self._ui.scrollAreaWidgetContents.layout().insertWidget(i+1,self.object)
         else:
-            print "widget is already first"
+            print("widget is already first")
             Qt.QMessageBox.warning(self,"Warning",
                                    "What you are about to do is impossible.")
         self.UpdateText()
 
     def Clr(self):
         """Cleaning"""
-        print 'clearing form ...'
+        print('clearing form ...')
         self.widgets, self._rowList = self._rowList, []
         for w in self.widgets:
             #lay.removeWidget(w)
@@ -666,13 +666,13 @@
 
     def PrintText(self): # just egzample
         self.rows = self._rowList
-        print "PRINT"
+        print("PRINT")
         for i in self.rows:
-            print "childrens: ", self.rows[i]
+            print("childrens: ", self.rows[i])
             self.targets = ('variableCombo','valueCombo','operatorCombo')
             for t in self.targets:
-                print "childrens: ", self.rows[i].children()
-                print getattr(self.rows[i].children(),t,None) or 'Attr_%s_not_found'%t
+                print("childrens: ", self.rows[i].children())
+                print(getattr(self.rows[i].children(),t,None) or 'Attr_%s_not_found'%t)
 
     def UpdateText(self,unused_text=''):
         self.text = ' '.join([str(row.GetText()) for row in self._rowList])
--- ./panic/gui/ui_data.py	(original)
+++ ./panic/gui/ui_data.py	(refactored)
@@ -1,5 +1,5 @@
-from utils import QtCore, QtGui
-from utils import clickableQLineEdit, clickableQTextEdit,getThemeIcon
+from .utils import QtCore, QtGui
+from .utils import clickableQLineEdit, clickableQTextEdit,getThemeIcon
 
 """
 ui_data.py, this file contains the Ui Classes used for AlarmEditor form.
@@ -162,7 +162,7 @@
         #self.formulaLabel.setFont(self.font)
         #self.formulaLabel.setObjectName("formulaLabel")
         #self.verticalLayout_2.addWidget(self.formulaLabel)
-        from utils import AlarmFormula
+        from .utils import AlarmFormula
         self.formulaTextEdit = AlarmFormula() #clickableQTextEdit(self.formulaWidget)
         self.formulaTextEdit.setReadOnly(True)
         self.formulaTextEdit.setObjectName("formulaTextEdit")
--- ./panic/alarmapi.py	(original)
+++ ./panic/alarmapi.py	(refactored)
@@ -88,7 +88,7 @@
 
 def unicode2str(obj):
     if isMapping(obj,strict=True):
-        n = dict(unicode2str(t) for t in obj.items())
+        n = dict(unicode2str(t) for t in list(obj.items()))
     elif isSequence(obj):
         n = list(unicode2str(t) for t in obj)
     elif isString(obj): n = str(obj)
@@ -109,7 +109,7 @@
     if isCallable(rm):
         try:
             obj = rm()
-        except Exception,e:
+        except Exception as e:
             obj = e
             
     if default is Exception:
@@ -135,14 +135,14 @@
 
 def getAlarmDeviceProperties(device):
     """ Method used in all panic classes """
-    props = _TANGO.get_device_property(device,ALARM_TABLES.keys())
+    props = _TANGO.get_device_property(device,list(ALARM_TABLES.keys()))
 
     #Updating old property names for backwards compatibility
     if not props['AlarmList']:
         props['AlarmList'] = _TANGO.get_device_property(
                                   device,['AlarmsList'])['AlarmsList']
         if props['AlarmList']:
-            print '%s: AlarmsList property renamed to AlarmList'%device
+            print('%s: AlarmsList property renamed to AlarmList'%device)
             _TANGO.put_device_property(
                     device,{'AlarmList':props['AlarmList'],'AlarmsList':[]})
             
@@ -195,7 +195,7 @@
         if write: self.write()
         
     def trace(self,msg):
-        print('%s: Alarm(%s): %s'%(fn.time2str(),self.tag,msg))
+        print(('%s: Alarm(%s): %s'%(fn.time2str(),self.tag,msg)))
 
     def clear(self):
         """ This method just initializes Flags updated from PyAlarm devices, 
@@ -332,7 +332,7 @@
             self.last_error = shortstr(state)
             state = 'state=ERROR;desc=%s'%shortstr(state)
             
-        elif state in AlarmStates.values():
+        elif state in list(AlarmStates.values()):
             state = AlarmStates.get_key(state)
             
         elif isNumber(state):
@@ -563,8 +563,8 @@
                     config = config.replace(',',';')
                 config = dict(s.split(':') for s in config.split(';'))
             except: 
-                print('Alarm(%s): Unable to parse config(%s):\n%s'
-                      %(tag,config,traceback.format_exc()))
+                print(('Alarm(%s): Unable to parse config(%s):\n%s'
+                      %(tag,config,traceback.format_exc())))
                 config = {}
         else:
             config = {}
@@ -632,8 +632,8 @@
             tag = new_line.split(':',1)[0]
             for l in lines:
                 if l.startswith(tag+':') and l!=new_line:
-                    print('In Alarm(%s).write(): line updated: %s' 
-                          % (tag,new_line))
+                    print(('In Alarm(%s).write(): line updated: %s' 
+                          % (tag,new_line)))
                     new_lines.append(new_line)
                     added = True
                 elif (not (exclude and re.match(exclude, l)) 
@@ -641,7 +641,7 @@
                     new_lines.append(l)
                     
             if not added and new_line not in new_lines: 
-                print('In Alarm(%s).write(): line added: %s'%(tag,new_line))
+                print(('In Alarm(%s).write(): line added: %s'%(tag,new_line)))
                 new_lines.append(new_line)
             return new_lines
 
@@ -720,7 +720,7 @@
         
     def to_str(self,keys=None):
         d = self.to_dict(keys)
-        keys = keys or d.keys()
+        keys = keys or list(d.keys())
         s = ';'.join('%s=%s'%(k,d[k]) for k in keys)
         return s
 
@@ -747,7 +747,7 @@
             self.get().init()
             self.config = None
         except:
-            print 'Device %s is not running' % self.name            
+            print('Device %s is not running' % self.name)            
         
     def read(self,filters='*'):
         """ 
@@ -763,7 +763,7 @@
                 #print('read:pass')
                 continue
             try:
-                tag,formula = map(str.strip,line.split(':',1))
+                tag,formula = list(map(str.strip,line.split(':',1)))
                 self.alarms[tag] = {'formula':formula}
                 try: 
                     local_receivers = [r for r in props['AlarmReceivers'] 
@@ -789,7 +789,7 @@
                 except: 
                     self.alarms[tag]['severity'] = DEFAULT_SEVERITY
             except:
-                print('Unparsable Alarm!: %s' % line)
+                print(('Unparsable Alarm!: %s' % line))
         #print('%s device manages %d alarms: %s'
         #   %(self.name,len(self.alarms),self.alarms.keys()))
         return self.alarms        
@@ -802,7 +802,7 @@
     def get_config(self,update=False):
         if not getattr(self,'config',None) or update: 
             props = self.api.get_db_properties(self.name,ALARM_CONFIG)
-            for p,v in props.items():
+            for p,v in list(props.items()):
                 if v in (False,True):
                     props[p] = v
                 elif v and v[0] not in ('',None):
@@ -810,7 +810,7 @@
                 else: #Using default property value
                     try: 
                         props[p] = (PyAlarmDefaultProperties[p][-1] or [''])[0]
-                    except: print traceback.format_exc()
+                    except: print(traceback.format_exc())
             self.config = props
         return self.config
                     
@@ -823,13 +823,13 @@
                        
     def get_alarm_properties(self):
         """ Method used in all panic classes """
-        props = self.api.get_db_properties(self.name,ALARM_TABLES.keys())
+        props = self.api.get_db_properties(self.name,list(ALARM_TABLES.keys()))
         #Updating old property names
         if not props['AlarmList']:
             props['AlarmList'] = \
                 self.api.get_db_property(self.name,'AlarmsList')
             if props['AlarmList']:
-                print('%s:AlarmsList property renamed to AlarmList'%self.name)
+                print(('%s:AlarmsList property renamed to AlarmList'%self.name))
                 self.api.put_db_properties(self.name,
                     {'AlarmList':props['AlarmList'],'AlarmsList':[]})
                 
@@ -868,7 +868,7 @@
             model = self.name+'/alarmsummary'
         else:
             model = self.name+'/activealarms'
-        print('%s.get_model(%s): %s'%(self.name,v,model))
+        print(('%s.get_model(%s): %s'%(self.name,v,model)))
         return model.lower()    
     
     def ping(self):
@@ -895,10 +895,10 @@
         if tag is None:
             self.api.put_db_property(self.name,'Enabled',True)
             self.init()
-            print('%s: Enabled!' %self.name)
+            print(('%s: Enabled!' %self.name))
         else:
             tags = [a for a in self.alarms if matchCl(tag,a)]
-            print('%s: Enabling %d alarms: %s' % (self.name,len(tags),tags))
+            print(('%s: Enabling %d alarms: %s' % (self.name,len(tags),tags)))
             [self.get().Enable([str(a)]) for t in tags]
                     
     def disable(self,tag=None,comment=None,timeout=None):
@@ -907,10 +907,10 @@
         if tag is None:
             self.api.put_db_property(self.name,'Enabled',False)
             self.init()
-            print('%s: Disabled!' %self.name)
+            print(('%s: Disabled!' %self.name))
         else:
             tags = [a for a in self.alarms if matchCl(tag,a)]
-            print('%s: Disabling %d alarms: %s'%(self.name,len(tags),tags))
+            print(('%s: Disabling %d alarms: %s'%(self.name,len(tags),tags)))
             [self.get().Disable(
               [str(a) for a in (t,comment,timeout) if a is not None]) 
               for t in tags]    
@@ -923,7 +923,7 @@
         if value is None:
             try:
                 value = getAttrValue(self._actives.read(),None)
-            except Exception,e:
+            except Exception as e:
                 return e
             
         if not value: return {}
@@ -984,8 +984,8 @@
         try:
             return (False if self.get().ResetAlarm(args) else True)
         except:
-            print 'Device %s is not running' % self.name
-            print traceback.format_exc()
+            print('Device %s is not running' % self.name)
+            print(traceback.format_exc())
             return None            
 
     def acknowledge(self,alarm,comment):
@@ -999,8 +999,8 @@
         try:
             return (False if self.get().Acknowledge(args) else True)
         except:
-            print 'Device %s is not running' % self.name
-            print traceback.format_exc()
+            print('Device %s is not running' % self.name)
+            print(traceback.format_exc())
             return None
     
     def __repr__(self):
@@ -1067,9 +1067,9 @@
 
     def __len__(self): return self.alarms.__len__()
     def __iter__(self): return self.alarms.__iter__()
-    def keys(self): return self.alarms.keys()
-    def values(self): return self.alarms.values()
-    def items(self): return self.alarms.items()
+    def keys(self): return list(self.alarms.keys())
+    def values(self): return list(self.alarms.values())
+    def items(self): return list(self.alarms.items())
 
     def load(self,filters=None,exported=False,extended=False):
         """
@@ -1095,8 +1095,8 @@
         all_devices = []
         all_servers = []
         for cl in ('PyAlarm','PanicEngineDS','PanicViewDS'):
-            all_devices.extend(map(str.lower,dbd.DbGetDeviceList(['*',cl])))
-            all_servers.extend(map(str.lower,dbd.DbGetServerList(cl+'/*')))
+            all_devices.extend(list(map(str.lower,dbd.DbGetDeviceList(['*',cl]))))
+            all_servers.extend(list(map(str.lower,dbd.DbGetServerList(cl+'/*'))))
 
         if exported:
             dev_exported = fandango.get_all_devices(
@@ -1138,7 +1138,7 @@
                 
         tprops=(time.time()-tprops)
         self.log('\t%d PyAlarm devices loaded, %d alarms'%(
-            len(self.devices),sum(len(v) for v in all_alarms.values())))
+            len(self.devices),sum(len(v) for v in list(all_alarms.values()))))
         
         ######################################################################
 
@@ -1147,10 +1147,10 @@
         self.get_phonebook(load=True)
         
         #Verifying that previously loaded alarms still exist
-        for k,v in self.alarms.items()[:]:
+        for k,v in list(self.alarms.items())[:]:
           found = False
           
-          for d,vals in all_alarms.items():
+          for d,vals in list(all_alarms.items()):
               if d.lower() == v.device.lower():
                   if k in vals:
                       found = True
@@ -1165,7 +1165,7 @@
         #Updating alarms dictionary
         for d,vals in sorted(all_alarms.items()):
           
-            for k,v in vals.items():
+            for k,v in list(vals.items()):
                 self.log('Loading alarm %s.%s (new=%s): %s'%(
                   d,k,k not in self.alarms,v))
                 
@@ -1213,18 +1213,18 @@
             alarms[line['tag']] = dict([('load',False)]
                 +[(k,line.get(k)) for k in CSV_FIELDS] )
             
-        loaded = alarms.keys()[:]
+        loaded = list(alarms.keys())[:]
         for i,tag in enumerate(loaded):
             new,old = alarms[tag],self.alarms.get(tag,None)
             if old and all(new.get(k)==getattr(old,k) 
                            for k in CSV_FIELDS):
                 alarms.pop(tag)
             elif write:
-                print('%d/%d: Loading %s from %s: %s'%(
-                  i,len(loaded),tag,filename,new))
+                print(('%d/%d: Loading %s from %s: %s'%(
+                  i,len(loaded),tag,filename,new)))
                 
         if write:
-            devs = set(v['device'] for v in alarms.values())
+            devs = set(v['device'] for v in list(alarms.values()))
             for d in devs:
                 if d not in self.devices:
                     raise Exception('PyAlarm %s does not exist!'%d)
@@ -1246,7 +1246,7 @@
         alarms = self.filter_alarms(regexp,alarms=alarms)
         columns = CSV_FIELDS + (['ACTIVE'] if states else [])
         csv.resize(1+len(alarms),len(CSV_FIELDS))
-        csv.setRow(0,map(str.upper,CSV_FIELDS))
+        csv.setRow(0,list(map(str.upper,CSV_FIELDS)))
         
         for i,(d,alarm) in enumerate(sorted((a.device,a) for a in alarms)):
             row = [getattr(alarm,k) for k in CSV_FIELDS]
@@ -1266,14 +1266,14 @@
         data = dict((a.tag,a.to_dict()) for a in alarms)
 
         if states:
-          for a,s in data.items():
+          for a,s in list(data.items()):
             s['active'] = self[a].get_active()
             s['date'] = time2str(s['active'])
             
         if config:
           data = {'alarms':data}
           data['devices'] = dict((d,t.get_config()) 
-                                 for d,t in self.devices.items())
+                                 for d,t in list(self.devices.items()))
           
         return data
         
@@ -1282,7 +1282,7 @@
         Updates devices properties values from a .csv file
         """
         csv = fandango.CSVArray(filename,header=0,comment='#',offset=1)
-        print 'Loading %s file'%filename
+        print('Loading %s file'%filename)
         for i in range(csv.size()[0]):
             l = csv.getd(i)
             if not matchCl(l['Host'],self.tango_host): 
@@ -1292,10 +1292,10 @@
             if (not d or d not in self.devices 
                 or regexp and not matchCl(regexp,d)):
                 continue
-            diff = [k for k,v in self.devices[d].get_config().items() 
+            diff = [k for k,v in list(self.devices[d].get_config().items()) 
                 if str(v).lower()!=str(l[k]).lower()]
             if diff:
-                print 'Updating %s properties: %s'%(d,diff)
+                print('Updating %s properties: %s'%(d,diff))
                 self.put_db_properties(d,dict((k,[l[k]]) for k in diff))
                 self.devices[d].init()
         return
@@ -1305,17 +1305,17 @@
         Save devices property values to a .csv file
         """
         lines = [['Host','Device']+ALARM_CONFIG]
-        for d,v in self.devices.items():
+        for d,v in list(self.devices.items()):
             if regexp and not matchCl(regexp,d): continue
             c = v.get_config()
             lines.append([self.tango_host,d]+[str(c[k]) for k in ALARM_CONFIG])
         open(filename,'w').write('\n'.join('\t'.join(l) for l in lines))
-        print '%s devices exported to %s'%(len(lines),filename)
+        print('%s devices exported to %s'%(len(lines),filename))
         
     def has_tag(self,tag,raise_=False):
         """ check for tags is case independent """
-        nt = first((k for k in self.keys() if k.lower()==tag.lower()),None)
-        if raise_ and nt is None: raise('TagDoesntExist:%s'%tag)
+        nt = first((k for k in list(self.keys()) if k.lower()==tag.lower()),None)
+        if raise_ and nt is None: raise 'TagDoesntExist:%s'
         return nt
 
     def save_tag(self,tag):
@@ -1355,7 +1355,7 @@
         elif ref.count('/')>=2:
           return self.servers.db.get_device_property(ref,props)
         else:
-          raise Exception,'Unknown %s'%ref      
+          raise Exception('Unknown %s'%ref)      
      
     def get_db_property(self,ref,prop):
         return list(self.get_db_properties(ref,[prop])[prop])
@@ -1366,7 +1366,7 @@
         elif ref.count('/')>=2:
           self.servers.db.put_device_property(ref,props)
         else:
-          raise Exception,'Unknown %s'%ref
+          raise Exception('Unknown %s'%ref)
     
     def put_db_property(self,ref,prop,value):
         if not isSequence(value): value = [value]
@@ -1387,9 +1387,9 @@
                 line = line.split('#',1)[0]
                 if line: ph[line.split(':',1)[0]]=line.split(':',1)[-1]
             #Replacing nested keys
-            for k,v in ph.items():
+            for k,v in list(ph.items()):
                 for s in v.split(','):
-                    for x,w in ph.items():
+                    for x,w in list(ph.items()):
                         if s==x: ph[k] = v.replace(s,w)
             self.phonebook = ph
         return self.phonebook
@@ -1428,15 +1428,15 @@
         lines = [line.strip().split(':',1)[0].upper() for line in prop]
         if name in lines: #Replacing
             index = lines.index(name)
-            print('AlarmAPI.edit_phonebook(%s,%s,%s), replacing at [%d]'%(
-              tag,value,section,index))
+            print(('AlarmAPI.edit_phonebook(%s,%s,%s), replacing at [%d]'%(
+              tag,value,section,index)))
             prop = prop[:index]+[value]+prop[index+1:]
         else: #Adding
             if section and '#' not in section: section = '#%s'%section
             index = len(lines) if not section or section not in lines \
                     else lines.index(section)+1
-            print('AlarmAPI.edit_phonebook(%s,%s,%s), adding at [%d]'%(
-              tag,value,section,index))
+            print(('AlarmAPI.edit_phonebook(%s,%s,%s), adding at [%d]'%(
+              tag,value,section,index)))
             prop = prop[:index]+[value]+prop[index:]
             
         self.save_phonebook(prop)
@@ -1468,7 +1468,7 @@
             prevs.update(filters)
             filters = prevs
         value = []
-        for name,f in filters.items():
+        for name,f in list(filters.items()):
             value.append('%s:%s'%(name,f if isString(f) else json.dumps(f)))
         self.put_db_property('PANIC','UserFilters',value)
       
@@ -1494,7 +1494,7 @@
                 rows.append(line[-1])
             return ','.join(rows)
         except:
-          print('>>> Exception at get_global_receivers(%s)'%tag)
+          print(('>>> Exception at get_global_receivers(%s)'%tag))
           traceback.print_exc()
           return ''
         
@@ -1517,7 +1517,7 @@
           if '/' in e:
               attrs.extend(d+'/'+a 
                   for dev,attr in [e.rsplit('/',1)] 
-                  for d,dd in self.devices.items() 
+                  for d,dd in list(self.devices.items()) 
                   for a in dd.alarms 
                   if matchCl(dev,d) and matchCl(attr,a))
           else:
@@ -1567,7 +1567,7 @@
         #It's redundant to check for the terminal character, re already does it
         var = re.findall(alnum,formula)
         #print '\tparse_alarms(%s): %s'%(formula,var)
-        return [a for a in self.keys() if a in var]
+        return [a for a in list(self.keys()) if a in var]
         
     def replace_alarms(self, formula):
         """
@@ -1594,7 +1594,7 @@
                     formula = new_formula+formula
             return formula
         except:
-            print('Exception in replace_alarms():%s'%traceback.format_exc())
+            print(('Exception in replace_alarms():%s'%traceback.format_exc()))
             return formula
                         
     def parse_attributes(self, formula, replace = True):
@@ -1621,7 +1621,7 @@
                 try:
                   r = d.evaluateFormula(formula)
                   return r
-                except Exception,e:
+                except Exception as e:
                   raise e
                 finally:
                   d.set_timeout_millis(t)
@@ -1630,7 +1630,7 @@
                 self._eval.update_locals({'PANIC':self})
                 if _locals: self._eval.update_locals(_locals)
                 return self._eval.eval(self.replace_alarms(formula))
-        except Exception,e:
+        except Exception as e:
             return e
 
     def get(self,tag='',device='',attribute='',receiver='', severity='', 
@@ -1640,7 +1640,7 @@
         (tag,device,attribute,receiver,severity) 
         """
         result=[]
-        alarms = alarms or self.values()
+        alarms = alarms or list(self.values())
         m = fn.parse_tango_model(tag)
         if m:
             tag = m.attribute
@@ -1653,7 +1653,7 @@
                    'receivers':receiver,'severity':severity}
           if strict: 
               found = [a for a in alarms if
-                     all([getattr(a,f)==v for f,v in filters.items() if v])]
+                     all([getattr(a,f)==v for f,v in list(filters.items()) if v])]
           else:
               found =  self.filter_alarms(filters,alarms)
           
@@ -1682,14 +1682,14 @@
         """ 
         self.log('Getting Alarm children ...')
         result=[]
-        for a,v in self.items():
+        for a,v in list(self.items()):
             children = self.parse_alarms(v.formula)
             if children: 
                 result.extend(children)
             else: 
                 result.append(a)
         result = set(result)
-        return [v for a,v in self.items() if a in result]
+        return [v for a,v in list(self.items()) if a in result]
       
     def filter_alarms(self, filters, alarms = None):
         """
@@ -1702,13 +1702,13 @@
           'device','active','severity','regexp','receivers'
           'formula','attribute','history','failed','hierarchy'
         """
-        alarms = alarms or self.values()
+        alarms = alarms or list(self.values())
         filters = filters or {}
         if isString(filters): filters = {'regexp':filters}
         exclude = []
         self.log('AlarmAPI.filter_alarms(%s)'%filters)
         
-        for f,r in filters.items():
+        for f,r in list(filters.items()):
             if f in ('name','alarm'): f = 'tag'
             if not r: continue
             result = []
@@ -1722,7 +1722,7 @@
                     regexp = r.split(',')
                     for e in regexp:
                         n,e = '!' in e,e.strip('!')
-                        s = str(map(str,a.to_dict().values()))
+                        s = str(list(map(str,list(a.to_dict().values()))))
                         m = searchCl(e,s)
                         if m and n: exclude.append(a.tag)
                         elif m and not n: ok = True
@@ -1789,8 +1789,8 @@
                     return dict((a,t) for a,t in zip(als,vals))
                 else:
                     raise Exception('')
-            except Exception,e:
-                print 'device %s is not running'%device
+            except Exception as e:
+                print('device %s is not running'%device)
                 traceback.print_exc()
                 [setattr(self.alarms[a],'active',None) for a in d.alarms]
                 return dict((a,None) for a in d.alarms)
@@ -1812,13 +1812,13 @@
                 'SMS':'SMS' in reks,
                 }
             result[alarm.tag].update((k,v) 
-                  for k,v in self.devices[alarm.device].get_config().items() 
+                  for k,v in list(self.devices[alarm.device].get_config().items()) 
                   if k in ALARM_CONFIG)
         return result        
 
     def get_admins_for_alarm(self,alarm=''):
-        users = filter(bool,
-                self.get_class_property('PyAlarm','PanicAdminUsers'))
+        users = list(filter(bool,
+                self.get_class_property('PyAlarm','PanicAdminUsers')))
         if users:
           if alarm: 
              users = users+[r.strip().split('@')[0] for r in 
@@ -1881,9 +1881,9 @@
         return 
         props=self.devices[device].get_config(True)
         dictlist=[]
-        for key, value in props.iteritems():
+        for key, value in props.items():
             temp = str(key)+'='+str(value[0] if isSequence(value) else value)
-            print '%s.%s.%s'%(device,alarm,temp)
+            print('%s.%s.%s'%(device,alarm,temp))
             dictlist.append(temp)
             
         l=';'.join(dictlist)
--- ./panic/widgets.py	(original)
+++ ./panic/widgets.py	(refactored)
@@ -98,8 +98,8 @@
 class AlarmValueLabel(Qt.QLabel):#TaurusValueLabel):
     
     def setModel(self,model):
-        print('AlarmValueLabel.setModel(%s(%s))'
-              %(type(model),str(model)))
+        print(('AlarmValueLabel.setModel(%s(%s))'
+              %(type(model),str(model))))
         if fandango.isString(model) and '/' not in model:
             model = str(model)
             self.alarm = panic.AlarmAPI(model)[model]
@@ -167,23 +167,23 @@
         
     def setAlarmModel(self,tag):
         attr = self.api[tag].get_attribute(full=True)
-        print('In PanicToolbarAction.setAlarmModel(%s = %s)'%(tag,attr))
+        print(('In PanicToolbarAction.setAlarmModel(%s = %s)'%(tag,attr)))
         self.tag = tag
         self.setModel(attr)
 
     def setModel(self,model):
-        print('In PanicToolbarAction.setModel(%s)'%model)
+        print(('In PanicToolbarAction.setModel(%s)'%model))
         TaurusBaseComponent.setModel(self,model)
         self.setIcon(self.getIcon('OFF'))
 
     def getIcon(self,url):
-        print "ToolbarAction.getIcon(%s)"%url
+        print("ToolbarAction.getIcon(%s)"%url)
         if url in self.LEDS: url = self.LEDS[url]
         icon = taurus.qt.qtgui.resource.getIcon(url)
         return icon
 
     def handleEvent(self,evt_src,evt_type,evt_value):
-        print('In PanicToolbarAction.handleEvent(%s)'%self.getModel())
+        print(('In PanicToolbarAction.handleEvent(%s)'%self.getModel()))
         TaurusBaseComponent.handleEvent(self, evt_src, evt_type, evt_value)
         if all(hasattr(evt_value,a) for a in ('value','quality')):
             self.value = evt_value.value
@@ -228,17 +228,17 @@
     def onAcknowledge(self):
         print('onAcknowledge')
         self.name=str(self.getModel().split('/')[-1]).strip(' ')
-        print(self.name)
+        print((self.name))
         if not taurus.Device(self.getModel().rsplit('/',1)[0]).command_inout('CheckAcknowledged',str(self.name)):
             prompt=QtGui.QInputDialog
             comment, ok=prompt.getText(self,'Input dialog','This will prevent reminders from sending.\nType a comment to continue:')
             if ok and len(str(comment)) > 3:
                 try:
                     comment=str(getpass.getuser())+': '+comment
-                    print('acknowledging %s with comment: %s !' %(self.name, comment))
+                    print(('acknowledging %s with comment: %s !' %(self.name, comment)))
                     taurus.Device(self.getModel().rsplit('/',1)[0]).command_inout('Acknowledge',[str(self.name), str(comment)])
                 except:
-                    print traceback.format_exc()
+                    print(traceback.format_exc())
             else:
                 Qt.QMessageBox.critical(self,"Error!",'Comment too short.\nAlarm not acknowledged.', QtGui.QMessageBox.AcceptRole, QtGui.QMessageBox.AcceptRole)
         elif not ok:
@@ -249,11 +249,11 @@
     def onDisable(self):
         print('onDisable')
         self.name=str(self.getModel().split('/')[-1]).strip(' ')
-        print(self.name)
+        print((self.name))
         if not taurus.Device(self.getModel().rsplit('/',1)[0]).command_inout('CheckDisabled',str(self.name)):
             reply=Qt.QMessageBox.question(self,"Warning!","Alarm will be disabled.\nDo you want to continue?", QtGui.QMessageBox.Yes | QtGui.QMessageBox.No, QtGui.QMessageBox.Yes)
             if reply == QtGui.QMessageBox.Yes:
-                print('disable %s !' %self.name)
+                print(('disable %s !' %self.name))
                 comment='DISABLED by '+str(getpass.getuser())
                 taurus.Device(self.getModel().rsplit('/',1)[0]).command_inout('Disable', [str(self.name), str(comment)])
         else:
@@ -262,16 +262,16 @@
     def onReset(self):
         print('onReset')
         self.name=str(self.getModel().split('/')[-1]).strip(' ')
-        print(self.name)
+        print((self.name))
         prompt=QtGui.QInputDialog
         comment, ok=prompt.getText(self,'Input dialog','This will reset the alarm.\nType a comment to continue:')
         if ok and len(str(comment)) > 3:
             try:
                 comment=str(getpass.getuser())+': '+comment
-                print('reseting %s with comment: %s !' %(self.name, comment))
+                print(('reseting %s with comment: %s !' %(self.name, comment)))
                 taurus.Device(self.getModel().rsplit('/',1)[0]).command_inout('ResetAlarm',[str(self.name), str(comment)])
             except:
-                print traceback.format_exc()
+                print(traceback.format_exc())
         elif not ok:
             pass
         else:
@@ -320,7 +320,7 @@
                 if line.startswith(alarm+':'):
                     res = line.split(':')
                     break
-        except Exception,e:
+        except Exception as e:
             print ('Cant get the alarm date!')
         return res
             
@@ -329,14 +329,14 @@
             if self.gui is None: self.gui = GuiWidget()
             self.gui.show()
           except:
-            print traceback.format_exc()
-            print 'AlarmGUI not available in PYTHONPATH'
+            print(traceback.format_exc())
+            print('AlarmGUI not available in PYTHONPATH')
             import os
             os.system('panic &')
           return self.gui 
 
     def setup(self,filters=None,api=None):#, alarms=None):
-        print "In PanicToolbar.setup(%s)"%filters
+        print("In PanicToolbar.setup(%s)"%filters)
         self.setMovable(True)
         self.setFloatable(True)
         filters = filters or self.filters
@@ -348,7 +348,7 @@
         #We should never clear this list again
         
         if filters and filters not in self.filters:
-            if isinstance(filters,basestring): self.filters.append(filters)
+            if isinstance(filters,str): self.filters.append(filters)
             else: self.filters.extend(filters)
 
         self.filter_alarms()
@@ -367,15 +367,15 @@
                     if any(fandango.functional.matchCl(f,a) for f in self.filters for a in (attrs if '/' in f else tags)):
                         self.alarms.append(alarm)
             except:
-                print 'In PanicToolbar.filter_alarms(): Unable to parse %s:\n%s'%(alarm,traceback.format_exc())
+                print('In PanicToolbar.filter_alarms(): Unable to parse %s:\n%s'%(alarm,traceback.format_exc()))
                 
-        if self.alarms: print 'In PanicToolbar.refresh(): %d alarms out of %d matches filters'%(len(self.alarms),len(self.api.keys()))
-        else: print 'In PanicToolbar.refresh(): no Alarm matches %s'%self.filters
+        if self.alarms: print('In PanicToolbar.refresh(): %d alarms out of %d matches filters'%(len(self.alarms),len(list(self.api.keys()))))
+        else: print('In PanicToolbar.refresh(): no Alarm matches %s'%self.filters)
         
         return self.alarms
 
     def refresh(self):
-        print 'In PanicToolbar.refresh(): filters = %s'%self.filters
+        print('In PanicToolbar.refresh(): filters = %s'%self.filters)
         
         if not self.filters: #(alarms!='*'):
             self.filters=[]
@@ -386,7 +386,7 @@
         
         visible=0
         def sorter(obj):
-            print '%s -> %s' % (obj.tag, obj.active)
+            print('%s -> %s' % (obj.tag, obj.active))
             quality = self.api[obj.tag].get_quality()
             
             #full_attr_name = obj.device+'/'+obj.get_attribute()
@@ -409,7 +409,7 @@
         qualities = dict((k,sorter(x)) for k,x in l)
         ordered = sorted(l,key=(lambda k: qualities[k[0]]))
         
-        [v.setModel('') for v in self.buttons.values()]
+        [v.setModel('') for v in list(self.buttons.values())]
         self.buttons.clear()
         self.clear()
         
@@ -417,13 +417,13 @@
         self.addWidget(label)
         self.setToolTip("PanicToolbar: %s"%str(self.filters))
         url = os.path.dirname(panic.__file__)+'/'+"panic-icon.gif"
-        print '\t%s'%url
+        print('\t%s'%url)
         self.addAction(Qt.QIcon(url),'',self.showGui)
 
         for a,alarm in ordered:
             if (visible>=self.max_visible): break
             if a in self.buttons: continue
-            print 'In PanicToolbar.refresh(): adding %s'%alarm
+            print('In PanicToolbar.refresh(): adding %s'%alarm)
             self.buttons[a] = ToolbarActionButton(self.gui,self.api)
             model = alarm.device+'/'+alarm.get_attribute()
             self.buttons[a].setAlarmModel(a)
@@ -477,7 +477,7 @@
             tmw.setCentralWidget(label)
             tmw.show()
         tmw.setMinimumWidth(600)
-        print '*'*80
+        print('*'*80)
         tmw.setWindowTitle('Alarm Toolbar')
         toolbar = PanicToolbar(tmw,filters=filters)
         tmw.addToolBar(toolbar)
--- ./doc/conf.py	(original)
+++ ./doc/conf.py	(refactored)
@@ -40,8 +40,8 @@
 master_doc = 'index'
 
 # General information about the project.
-project = u'panic'
-copyright = u'2014, S.Rubio Manrique'
+project = 'panic'
+copyright = '2014, S.Rubio Manrique'
 
 # The version info for the project you're documenting, acts as replacement for
 # |version| and |release|, also used in various other places throughout the
@@ -185,8 +185,8 @@
 # Grouping the document tree into LaTeX files. List of tuples
 # (source start file, target name, title, author, documentclass [howto/manual]).
 latex_documents = [
-  ('index', 'panic.tex', u'panic Documentation',
-   u'Author', 'manual'),
+  ('index', 'panic.tex', 'panic Documentation',
+   'Author', 'manual'),
 ]
 
 # The name of an image file (relative to this directory) to place at the top of
@@ -215,8 +215,8 @@
 # One entry per manual page. List of tuples
 # (source start file, name, description, authors, manual section).
 man_pages = [
-    ('index', 'panic', u'panic Documentation',
-     [u'Author'], 1)
+    ('index', 'panic', 'panic Documentation',
+     ['Author'], 1)
 ]
 
 # If true, show URL addresses after external links.
@@ -229,8 +229,8 @@
 # (source start file, target name, title, author,
 #  dir menu entry, description, category)
 texinfo_documents = [
-  ('index', 'panic', u'panic Documentation',
-   u'Sergi Rubio-Manrique', 'panic', 'One line description of project.',
+  ('index', 'panic', 'panic Documentation',
+   'Sergi Rubio-Manrique', 'panic', 'One line description of project.',
    'Miscellaneous'),
 ]
 
@@ -247,10 +247,10 @@
 # -- Options for Epub output ---------------------------------------------------
 
 # Bibliographic Dublin Core info.
-epub_title = u'panic'
-epub_author = u'Sergi Rubio-Manrique'
-epub_publisher = u'Sergi Rubio-Manrique'
-epub_copyright = u'2014, Sergi Rubio-Manrique'
+epub_title = 'panic'
+epub_author = 'Sergi Rubio-Manrique'
+epub_publisher = 'Sergi Rubio-Manrique'
+epub_copyright = '2014, Sergi Rubio-Manrique'
 
 # The language of the text. It defaults to the language option
 # or en if the language is not set.
--- ./doc/update.py	(original)
+++ ./doc/update.py	(refactored)
@@ -46,7 +46,7 @@
   o.write(header)
   o.close()
  except:
-  print('%s failed!'%str(data))
+  print(('%s failed!'%str(data)))
   
   
   
--- ./extra/report.py	(original)
+++ ./extra/report.py	(refactored)
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 
-import sys,os,urllib,traceback
+import sys,os,urllib.request,urllib.parse,urllib.error,traceback
 try:
   import panic,fandango
   from fandango.functional import *
@@ -17,22 +17,22 @@
     servers = fandango.Astor()
     servers.load_by_name('PyAlarm/*%s*'%regexp)
     servers.load_by_name('Panic*/*%s*'%regexp)
-    print('%d servers loaded'%len(servers))
+    print(('%d servers loaded'%len(servers)))
     states = servers.states()
-    [states.pop(k) for k in states.keys() if any(e in k for e in exclude)]
+    [states.pop(k) for k in list(states.keys()) if any(e in k for e in exclude)]
     exported = fandango.get_all_devices(exported=True)
     exported = [s for s in states if 'dserver/'+s in exported]
-    zombies = sorted(d for d,s in states.items() 
+    zombies = sorted(d for d,s in list(states.items()) 
                      if d in exported and s is None)
-    off = sorted(d for d,s in states.items() 
+    off = sorted(d for d,s in list(states.items()) 
                  if d not in zombies and s is None)
     on = sorted(s for s in states if states[s] is not None)
 
     print('\n')
     for s in off:
-      print('%s : %s : OFF'%(servers[s].host,s))
+      print(('%s : %s : OFF'%(servers[s].host,s)))
     for s in zombies:
-      print('%s : %s : ZOMBIE!'%(servers[s].host,s))
+      print(('%s : %s : ZOMBIE!'%(servers[s].host,s)))
     print('\n')
 
     failed = []
@@ -41,15 +41,15 @@
         if not fandango.matchCl('(sys|dserver)/*',d):
           ss = fandango.check_device(d)
           p = fandango.tango.get_device_property(d,'pollingperiod')
-          if not p: print('%s has no polling defined'%d)
-          elif float(p)>1000: print('%s has a wrong polling! %s'%(d,p))
+          if not p: print(('%s has no polling defined'%d))
+          elif float(p)>1000: print(('%s has a wrong polling! %s'%(d,p)))
           if str(ss) not in ('ALARM','ON'):
             failed.append(s)
-            print('%s : %s : %s : %s' % (servers[s].host,s,d,str(ss)))
+            print(('%s : %s : %s : %s' % (servers[s].host,s,d,str(ss))))
             
-    print('\n%d servers have failed devices'%len(failed))
+    print(('\n%d servers have failed devices'%len(failed)))
     restart = sorted(set(d for l in (off,zombies,failed) for d in l))
-    print('%d servers should be restarted'%len(restart))
+    print(('%d servers should be restarted'%len(restart)))
     print('')
             
     return {'off':off,'on':on,'zombies':zombies,
@@ -65,17 +65,17 @@
     fandango.wait(10.)
     for s in astor:
       host = host or astor[s].host
-      print('Starting %s at %s'%(s,host))
+      print(('Starting %s at %s'%(s,host)))
       astor.start_servers(s,host=host)
     return
 
 def generate_html_report(args):
-    print('panic.extra.generate_html_report(%s)'%args)
+    print(('panic.extra.generate_html_report(%s)'%args))
     assert web,'fandango.web not available'
     OUTPUT = args[-1] if len(args) else '/srv/www/htdocs/reports/alarms.html'
     FILTER = args[1] if len(args)>1 else '*'
     HOST = os.getenv('TANGO_HOST',os.getenv('HOST'))
-    print 'OUTPUT = %s, FILTER = %s, HOST= %s'% (OUTPUT,FILTER,HOST)
+    print('OUTPUT = %s, FILTER = %s, HOST= %s'% (OUTPUT,FILTER,HOST))
     api = panic.api(FILTER)
     lines = []
     severities = ['ALARM','WARNING','ERROR','INFO','DEBUG']
@@ -93,7 +93,7 @@
                 for a in api.get(device=d):
                     if any(s.startswith(a.tag+':') for s in active):
                         summary[a.severity or 'WARNING']+=1
-        except Exception,e:
+        except Exception as e:
             lines.append(web.title(d.upper(),3))
             se = traceback.format_exc()
             if 'desc =' in se: se = '\n'.join([l for l in se.split('\n') if 'desc =' in l][:1])
@@ -112,4 +112,4 @@
         exclude = [a for a in sys.argv[2:] if a.startswith('!')]
         include = '|'.join([a for a in sys.argv[2:] if a not in exclude])
         args = [include or '*'] + iif(list,exclude,[],True)
-        print(dict2str(get_servers_status(*args)))
+        print((dict2str(get_servers_status(*args))))
